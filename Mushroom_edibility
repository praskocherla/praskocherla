{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/praskocherla/praskocherla/blob/main/Mushroom_edibility\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The ([Dataset](https://archive.ics.uci.edu/dataset/73/mushroom)) focuses on various attributes of mushrooms, particularly those that are crucial for determining their edibility.Specifically, We aim to explore:\n",
        "* Which attributes are most indicative of a mushroom's edibility?\n",
        "* Are there any clear patterns or correlations among the features and the target variable (poisonous or edible)?\n",
        "* Can a predictive model be developed to accurately identify edible and poisonous mushrooms based on their attributes?\n",
        "\n",
        "By analyzing this dataset, I hope to gain insights into the characteristics that distinguish edible mushrooms from poisonous ones, potentially aiding in safer mushroom identification and consumption."
      ],
      "metadata": {
        "id": "JnJEfcIqs7lK"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Milestone 1 : EDA"
      ],
      "metadata": {
        "id": "yiqyLb0st7ye"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Steps to be followed for the above milestone is :-\n",
        "* Import Dataset and Library\n",
        "* Data extraction from link\n",
        "* Summary of Dataset (Descriptive statistics )\n",
        "* Change datatypes\n",
        "## Data Cleaning\n",
        "* Detecting Null Values\n",
        "* Null Value imputation\n",
        "* Outlier Detection\n",
        "* Outlier Removal\n",
        "## Data Visualisation\n",
        "* Univariate Analysis(Histograms and boxplots )\n",
        "* Bivariate Analysis(barplots and scatterplots)\n",
        "* One Hot encoding\n",
        "* Correlation matrix"
      ],
      "metadata": {
        "id": "gO1nqupPuAc2"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "WItY71yZsjuV"
      },
      "outputs": [],
      "source": [
        "##Import the libraries\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "t9xJg__-9Y0v",
        "outputId": "1b700b49-a200-447b-d530-6433ce5ef5f9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vrDUNSjd9qLx",
        "outputId": "132edec8-5b40-421d-ea00-548402033c5e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "vRTjDk6F6gy6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# #importing the dataset\n",
        "data=pd.read_csv('/content/drive/MyDrive/ALY6040/agaricus-lepiota.csv',names=[\"Target\",\"cap-shape\",\"cap-surface\",\"cap-color\",\"bruises\",\"odor\",\"gill-attachment\",\"gill-spacing\",\"gill-size\",\"gill-color\",\"stalk-shape\",\"stalk-root\",\"stalk-surface-above-ring\",\"stalk-surface-below-ring\",\"stalk-color-above-ring\",\"stalk-color-below-ring\",\"veil-type\",\"veil-color\",\"ring-number\",\"ring-type\",\"spore-print-color\",\"population\",\"habitat\"])"
      ],
      "metadata": {
        "id": "4A2NPurRwX_y"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dataset = data.copy()"
      ],
      "metadata": {
        "id": "vNQGcF7xSKMb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data.head()"
      ],
      "metadata": {
        "id": "K9lwQbS8z_Ek",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 308
        },
        "outputId": "d6eee620-88cb-455d-a8cf-538f98401849"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Target cap-shape cap-surface cap-color bruises odor gill-attachment  \\\n",
              "0      p         x           s         n       t    p               f   \n",
              "1      e         x           s         y       t    a               f   \n",
              "2      e         b           s         w       t    l               f   \n",
              "3      p         x           y         w       t    p               f   \n",
              "4      e         x           s         g       f    n               f   \n",
              "\n",
              "  gill-spacing gill-size gill-color  ... stalk-surface-below-ring  \\\n",
              "0            c         n          k  ...                        s   \n",
              "1            c         b          k  ...                        s   \n",
              "2            c         b          n  ...                        s   \n",
              "3            c         n          n  ...                        s   \n",
              "4            w         b          k  ...                        s   \n",
              "\n",
              "  stalk-color-above-ring stalk-color-below-ring veil-type veil-color  \\\n",
              "0                      w                      w         p          w   \n",
              "1                      w                      w         p          w   \n",
              "2                      w                      w         p          w   \n",
              "3                      w                      w         p          w   \n",
              "4                      w                      w         p          w   \n",
              "\n",
              "  ring-number ring-type spore-print-color population habitat  \n",
              "0           o         p                 k          s       u  \n",
              "1           o         p                 n          n       g  \n",
              "2           o         p                 n          n       m  \n",
              "3           o         p                 k          s       u  \n",
              "4           o         e                 n          a       g  \n",
              "\n",
              "[5 rows x 23 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9e194b8c-61ac-4092-9485-738ae1e5165d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Target</th>\n",
              "      <th>cap-shape</th>\n",
              "      <th>cap-surface</th>\n",
              "      <th>cap-color</th>\n",
              "      <th>bruises</th>\n",
              "      <th>odor</th>\n",
              "      <th>gill-attachment</th>\n",
              "      <th>gill-spacing</th>\n",
              "      <th>gill-size</th>\n",
              "      <th>gill-color</th>\n",
              "      <th>...</th>\n",
              "      <th>stalk-surface-below-ring</th>\n",
              "      <th>stalk-color-above-ring</th>\n",
              "      <th>stalk-color-below-ring</th>\n",
              "      <th>veil-type</th>\n",
              "      <th>veil-color</th>\n",
              "      <th>ring-number</th>\n",
              "      <th>ring-type</th>\n",
              "      <th>spore-print-color</th>\n",
              "      <th>population</th>\n",
              "      <th>habitat</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>p</td>\n",
              "      <td>x</td>\n",
              "      <td>s</td>\n",
              "      <td>n</td>\n",
              "      <td>t</td>\n",
              "      <td>p</td>\n",
              "      <td>f</td>\n",
              "      <td>c</td>\n",
              "      <td>n</td>\n",
              "      <td>k</td>\n",
              "      <td>...</td>\n",
              "      <td>s</td>\n",
              "      <td>w</td>\n",
              "      <td>w</td>\n",
              "      <td>p</td>\n",
              "      <td>w</td>\n",
              "      <td>o</td>\n",
              "      <td>p</td>\n",
              "      <td>k</td>\n",
              "      <td>s</td>\n",
              "      <td>u</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>e</td>\n",
              "      <td>x</td>\n",
              "      <td>s</td>\n",
              "      <td>y</td>\n",
              "      <td>t</td>\n",
              "      <td>a</td>\n",
              "      <td>f</td>\n",
              "      <td>c</td>\n",
              "      <td>b</td>\n",
              "      <td>k</td>\n",
              "      <td>...</td>\n",
              "      <td>s</td>\n",
              "      <td>w</td>\n",
              "      <td>w</td>\n",
              "      <td>p</td>\n",
              "      <td>w</td>\n",
              "      <td>o</td>\n",
              "      <td>p</td>\n",
              "      <td>n</td>\n",
              "      <td>n</td>\n",
              "      <td>g</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>e</td>\n",
              "      <td>b</td>\n",
              "      <td>s</td>\n",
              "      <td>w</td>\n",
              "      <td>t</td>\n",
              "      <td>l</td>\n",
              "      <td>f</td>\n",
              "      <td>c</td>\n",
              "      <td>b</td>\n",
              "      <td>n</td>\n",
              "      <td>...</td>\n",
              "      <td>s</td>\n",
              "      <td>w</td>\n",
              "      <td>w</td>\n",
              "      <td>p</td>\n",
              "      <td>w</td>\n",
              "      <td>o</td>\n",
              "      <td>p</td>\n",
              "      <td>n</td>\n",
              "      <td>n</td>\n",
              "      <td>m</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>p</td>\n",
              "      <td>x</td>\n",
              "      <td>y</td>\n",
              "      <td>w</td>\n",
              "      <td>t</td>\n",
              "      <td>p</td>\n",
              "      <td>f</td>\n",
              "      <td>c</td>\n",
              "      <td>n</td>\n",
              "      <td>n</td>\n",
              "      <td>...</td>\n",
              "      <td>s</td>\n",
              "      <td>w</td>\n",
              "      <td>w</td>\n",
              "      <td>p</td>\n",
              "      <td>w</td>\n",
              "      <td>o</td>\n",
              "      <td>p</td>\n",
              "      <td>k</td>\n",
              "      <td>s</td>\n",
              "      <td>u</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>e</td>\n",
              "      <td>x</td>\n",
              "      <td>s</td>\n",
              "      <td>g</td>\n",
              "      <td>f</td>\n",
              "      <td>n</td>\n",
              "      <td>f</td>\n",
              "      <td>w</td>\n",
              "      <td>b</td>\n",
              "      <td>k</td>\n",
              "      <td>...</td>\n",
              "      <td>s</td>\n",
              "      <td>w</td>\n",
              "      <td>w</td>\n",
              "      <td>p</td>\n",
              "      <td>w</td>\n",
              "      <td>o</td>\n",
              "      <td>e</td>\n",
              "      <td>n</td>\n",
              "      <td>a</td>\n",
              "      <td>g</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 23 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9e194b8c-61ac-4092-9485-738ae1e5165d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9e194b8c-61ac-4092-9485-738ae1e5165d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9e194b8c-61ac-4092-9485-738ae1e5165d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-23b29653-5e67-416f-aae2-58de1e2a8088\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-23b29653-5e67-416f-aae2-58de1e2a8088')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-23b29653-5e67-416f-aae2-58de1e2a8088 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.shape"
      ],
      "metadata": {
        "id": "UUy_CytV1nHp",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3097b87d-0446-4659-bbbd-a35ab8061f00"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(8124, 23)"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.info()"
      ],
      "metadata": {
        "id": "qa6v4zO11qdY",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0f30ac9f-1b19-4731-821a-d4be4b61fedc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 8124 entries, 0 to 8123\n",
            "Data columns (total 23 columns):\n",
            " #   Column                    Non-Null Count  Dtype \n",
            "---  ------                    --------------  ----- \n",
            " 0   Target                    8124 non-null   object\n",
            " 1   cap-shape                 8124 non-null   object\n",
            " 2   cap-surface               8124 non-null   object\n",
            " 3   cap-color                 8124 non-null   object\n",
            " 4   bruises                   8124 non-null   object\n",
            " 5   odor                      8124 non-null   object\n",
            " 6   gill-attachment           8124 non-null   object\n",
            " 7   gill-spacing              8124 non-null   object\n",
            " 8   gill-size                 8124 non-null   object\n",
            " 9   gill-color                8124 non-null   object\n",
            " 10  stalk-shape               8124 non-null   object\n",
            " 11  stalk-root                8124 non-null   object\n",
            " 12  stalk-surface-above-ring  8124 non-null   object\n",
            " 13  stalk-surface-below-ring  8124 non-null   object\n",
            " 14  stalk-color-above-ring    8124 non-null   object\n",
            " 15  stalk-color-below-ring    8124 non-null   object\n",
            " 16  veil-type                 8124 non-null   object\n",
            " 17  veil-color                8124 non-null   object\n",
            " 18  ring-number               8124 non-null   object\n",
            " 19  ring-type                 8124 non-null   object\n",
            " 20  spore-print-color         8124 non-null   object\n",
            " 21  population                8124 non-null   object\n",
            " 22  habitat                   8124 non-null   object\n",
            "dtypes: object(23)\n",
            "memory usage: 1.4+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Replacing the coded values"
      ],
      "metadata": {
        "id": "uGekeV-_2ZKQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data['Target']=data['Target'].replace(['e','p'],['edible','poisonous'])"
      ],
      "metadata": {
        "id": "Dpqgz9c92bm3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data['Target'].value_counts()"
      ],
      "metadata": {
        "id": "NnqbWNOB22oD",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "def8ad8b-c13b-4d89-cb1d-28dc43bc05df"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "edible       4208\n",
              "poisonous    3916\n",
              "Name: Target, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## calculated the % of data for each target variables type\n",
        "(data['Target'].value_counts())/len(data)*100"
      ],
      "metadata": {
        "id": "fyexyUVC4By9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ed47e250-52aa-47db-e16c-5599164de92c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "edible       51.797144\n",
              "poisonous    48.202856\n",
              "Name: Target, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['cap-shape']=data['cap-shape'].replace(['x','b','c','f','k','s'],['convex','bell','conical','flat','knobbed','sunken'])"
      ],
      "metadata": {
        "id": "D6vrBpzFtfBB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "## calculated the % of data for each cap-shape variables type\n",
        "data['cap-shape'].value_counts()\n"
      ],
      "metadata": {
        "id": "D6yf6YHZupRY",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a761206f-15b2-4530-82b9-f2925fba6314"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "convex     3656\n",
              "flat       3152\n",
              "knobbed     828\n",
              "bell        452\n",
              "sunken       32\n",
              "conical       4\n",
              "Name: cap-shape, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "(data['cap-shape'].value_counts())/len(data)*100"
      ],
      "metadata": {
        "id": "ecmKMee949XL",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "76e236c1-0a03-46c7-fb70-f62be95db1f2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "convex     45.002462\n",
              "flat       38.798621\n",
              "knobbed    10.192024\n",
              "bell        5.563762\n",
              "sunken      0.393895\n",
              "conical     0.049237\n",
              "Name: cap-shape, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['cap-surface']=data['cap-surface'].replace(['s','y','f','g'],['smooth','scaly','fibrous','grooves'])"
      ],
      "metadata": {
        "id": "piiPyRdt5Y_u"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data['cap-surface'].value_counts()"
      ],
      "metadata": {
        "id": "4CZWbGA458lC",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "bb03664e-e97f-42ba-b93a-c6317bb2d2aa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "scaly      3244\n",
              "smooth     2556\n",
              "fibrous    2320\n",
              "grooves       4\n",
              "Name: cap-surface, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## calculated the % of data for each cap-surface variables type\n",
        "(data['cap-surface'].value_counts())/len(data)*100\n"
      ],
      "metadata": {
        "id": "9dNE3jLx6EzS",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "dc72edc5-b370-4beb-f317-6e8348e023dc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "scaly      39.931068\n",
              "smooth     31.462334\n",
              "fibrous    28.557361\n",
              "grooves     0.049237\n",
              "Name: cap-surface, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['cap-color']=data['cap-color'].replace(['n','w','g','b','c','r','p','u','e','y'],['brown','white','gray','buff','cinnamon','green','pink','purple','red','yellow'])"
      ],
      "metadata": {
        "id": "jo1ic0a06STi"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data['cap-color'].value_counts()"
      ],
      "metadata": {
        "id": "m5FZQ7fd7oCR",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7aecac4e-3132-4281-e1a4-9341f040a8d8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "brown       2284\n",
              "gray        1840\n",
              "red         1500\n",
              "yellow      1072\n",
              "white       1040\n",
              "buff         168\n",
              "pink         144\n",
              "cinnamon      44\n",
              "purple        16\n",
              "green         16\n",
              "Name: cap-color, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## calculated the % of data for each cap-color variables type\n",
        "(data['cap-color'].value_counts())/len(data)*100"
      ],
      "metadata": {
        "id": "moComGER8pay",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "17b293eb-3b98-48a2-c4bf-977f663e7c68"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "brown       28.114229\n",
              "gray        22.648941\n",
              "red         18.463811\n",
              "yellow      13.195470\n",
              "white       12.801576\n",
              "buff         2.067947\n",
              "pink         1.772526\n",
              "cinnamon     0.541605\n",
              "purple       0.196947\n",
              "green        0.196947\n",
              "Name: cap-color, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['bruises']=data['bruises'].replace(['t','f'],['bruises','no'])"
      ],
      "metadata": {
        "id": "UrlpY42A9Ei1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data['bruises'].value_counts()"
      ],
      "metadata": {
        "id": "cs5PBJaV-P-I",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3d42b0af-17e3-439b-e491-8f560c1e7e67"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "no         4748\n",
              "bruises    3376\n",
              "Name: bruises, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## calculated the % of data for each bruises variables type\n",
        "(data['bruises'].value_counts())/len(data)*100"
      ],
      "metadata": {
        "id": "-M0xt_-g-Ur4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9255a73b-dcb7-4354-dcf5-aa45a3003bfa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "no         58.444116\n",
              "bruises    41.555884\n",
              "Name: bruises, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['odor']=data['odor'].replace(['p','a','l','n','c','y','f','m','s'],\n",
        "                                  ['pungent','almond','anise','none','creosote','fishy','foul','musty','spicy'])\n"
      ],
      "metadata": {
        "id": "Wo6hFY4u-flX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data['odor'].value_counts()"
      ],
      "metadata": {
        "id": "fcll6JBa_FCW",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "39fd9f16-3058-4a68-a24c-5859aa656665"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "none        3528\n",
              "foul        2160\n",
              "fishy        576\n",
              "spicy        576\n",
              "almond       400\n",
              "anise        400\n",
              "pungent      256\n",
              "creosote     192\n",
              "musty         36\n",
              "Name: odor, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## calculated the % of data for each odor variables type\n",
        "(data['odor'].value_counts())/len(data)*100"
      ],
      "metadata": {
        "id": "hSubtrrZ_QHz",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b993085c-5e4e-4906-a908-d438bd04eca9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "none        43.426883\n",
              "foul        26.587888\n",
              "fishy        7.090103\n",
              "spicy        7.090103\n",
              "almond       4.923683\n",
              "anise        4.923683\n",
              "pungent      3.151157\n",
              "creosote     2.363368\n",
              "musty        0.443131\n",
              "Name: odor, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['gill-attachment']=data['gill-attachment'].replace(['a','d','f','n'],['attached','descending','free','notched'])\n"
      ],
      "metadata": {
        "id": "-TEmxrzm_cZE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data['gill-attachment'].value_counts()"
      ],
      "metadata": {
        "id": "4ZXy9DGQATnz",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7dee5439-afea-486a-eda6-a1b98c671415"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "free        7914\n",
              "attached     210\n",
              "Name: gill-attachment, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## calculated the % of data for each gill-attachment variables type\n",
        "(data['gill-attachment'].value_counts())/len(data)*100"
      ],
      "metadata": {
        "id": "1qRtoXR8AeKv",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9df8edeb-367a-4562-bd44-a75a49c1e573"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "free        97.415066\n",
              "attached     2.584934\n",
              "Name: gill-attachment, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['gill-spacing']=data['gill-spacing'].replace(['c','w','d'],['close','crowded','distant'])"
      ],
      "metadata": {
        "id": "uVKEbRbgAoDE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data['gill-spacing'].value_counts()"
      ],
      "metadata": {
        "id": "FUGMM7hYBFcN",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "eadfbc54-a8e2-4dc0-ec79-e9bdf7619ffa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "close      6812\n",
              "crowded    1312\n",
              "Name: gill-spacing, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## calculated the % of data for each gill-spacing variables type\n",
        "(data['gill-spacing'].value_counts())/len(data)*100"
      ],
      "metadata": {
        "id": "vTMCClu3Bh40",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ca46bfaf-c95a-4cf3-b2a0-8c9b78e376ae"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "close      83.85032\n",
              "crowded    16.14968\n",
              "Name: gill-spacing, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['gill-size']=data['gill-size'].replace(['n','b'],['narrow','broad'])"
      ],
      "metadata": {
        "id": "r-ICmqjIB3PP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data['gill-size'].value_counts()"
      ],
      "metadata": {
        "id": "L0Otm6sjCZFX",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f0c415ff-da85-4828-eebc-8a3bf8565f3d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "broad     5612\n",
              "narrow    2512\n",
              "Name: gill-size, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## calculated the % of data for each gill-size variables type\n",
        "(data['gill-size'].value_counts())/len(data)*100"
      ],
      "metadata": {
        "id": "KQsmBZziCs04",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4dbe22a8-b65b-4003-dca3-527379707815"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "broad     69.079271\n",
              "narrow    30.920729\n",
              "Name: gill-size, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['gill-color']=data['gill-color'].replace(['k','n','b','h','g','r','o','p','u','e','w','y'],\n",
        "                                              ['black','brown','buff','chocolate','gray','green','orange','pink','purple','red', 'white','yellow'])"
      ],
      "metadata": {
        "id": "Md03HyjiCzmT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data['gill-color'].value_counts()"
      ],
      "metadata": {
        "id": "xf7n4koPDRnb",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a6433506-a3e9-45b5-98e3-1864df8cb544"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "buff         1728\n",
              "pink         1492\n",
              "white        1202\n",
              "brown        1048\n",
              "gray          752\n",
              "chocolate     732\n",
              "purple        492\n",
              "black         408\n",
              "red            96\n",
              "yellow         86\n",
              "orange         64\n",
              "green          24\n",
              "Name: gill-color, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## calculated the % of data for each gill-color variables type\n",
        "(data['gill-color'].value_counts())/len(data)*100"
      ],
      "metadata": {
        "id": "GCRu20XIDbyQ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d89680df-bc0d-4f39-80ce-7289fab8d2f6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "buff         21.270310\n",
              "pink         18.365337\n",
              "white        14.795667\n",
              "brown        12.900049\n",
              "gray          9.256524\n",
              "chocolate     9.010340\n",
              "purple        6.056130\n",
              "black         5.022157\n",
              "red           1.181684\n",
              "yellow        1.058592\n",
              "orange        0.787789\n",
              "green         0.295421\n",
              "Name: gill-color, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['stalk-shape'] = data['stalk-shape'].replace(['e','t'],['enlarging','tapering'])"
      ],
      "metadata": {
        "id": "EYRNSfi2WLXm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data['stalk-shape'].value_counts()"
      ],
      "metadata": {
        "id": "vn3Noc8RWiL3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "008bdb04-ffd0-456d-c824-9b15f8f5af31"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tapering     4608\n",
              "enlarging    3516\n",
              "Name: stalk-shape, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## calculated the % of data for each stalk-shape variables type\n",
        "(data['stalk-shape'].value_counts())/len(data)*100"
      ],
      "metadata": {
        "id": "GuE4CrHJWizD",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f559b61a-051b-46dc-8203-b700b02530e6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tapering     56.720827\n",
              "enlarging    43.279173\n",
              "Name: stalk-shape, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['stalk-root'] = data['stalk-root'].replace(['b','c','u','e','z','r','?'],['bulbous','club','cup','equal', 'rhizomorphs','rooted',np.nan])"
      ],
      "metadata": {
        "id": "5zKMqLUhWu5h"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data['stalk-root'].value_counts()"
      ],
      "metadata": {
        "id": "b_WY6RuwWu89",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c6f09761-65f4-4da8-fa4f-81713870db24"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "bulbous    3776\n",
              "equal      1120\n",
              "club        556\n",
              "rooted      192\n",
              "Name: stalk-root, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## calculated the % of data for each stalk-root variables type\n",
        "(data['stalk-root'].value_counts())/len(data)*100"
      ],
      "metadata": {
        "id": "WQXQONGzWu_9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5f22e87d-00e1-424d-c417-48390b4b41bb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "bulbous    46.479567\n",
              "equal      13.786312\n",
              "club        6.843919\n",
              "rooted      2.363368\n",
              "Name: stalk-root, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['stalk-surface-above-ring']=data['stalk-surface-above-ring'].replace(['f','y','k','s'],['fibrous','scaly','silky','smooth'])"
      ],
      "metadata": {
        "id": "72GviFCFYPuD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data['stalk-surface-above-ring'].value_counts()"
      ],
      "metadata": {
        "id": "do5I3SwFYPwP",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0f7ba169-711c-4ee7-8324-edd94ca7da94"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "smooth     5176\n",
              "silky      2372\n",
              "fibrous     552\n",
              "scaly        24\n",
              "Name: stalk-surface-above-ring, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## calculated the % of data for each stalk-surface-above-ring variables type\n",
        "(data['stalk-surface-above-ring'].value_counts())/len(data)*100"
      ],
      "metadata": {
        "id": "l_CKVr8UYPzj",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "97ecd95d-090f-4bf7-b95d-e4336dda7764"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "smooth     63.712457\n",
              "silky      29.197440\n",
              "fibrous     6.794682\n",
              "scaly       0.295421\n",
              "Name: stalk-surface-above-ring, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['stalk-surface-below-ring']=data['stalk-surface-below-ring'].replace(['f','y','k','s'],['fibrous','scaly','silky','smooth'])"
      ],
      "metadata": {
        "id": "preRLDm_Du37"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data['stalk-surface-below-ring'].value_counts()"
      ],
      "metadata": {
        "id": "gjA4roG1FB4K",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "44682b37-2f30-44e8-dff0-d2774e8a501f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "smooth     4936\n",
              "silky      2304\n",
              "fibrous     600\n",
              "scaly       284\n",
              "Name: stalk-surface-below-ring, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## calculated the % of data for each stalk-surface-below-ring variables type\n",
        "(data['stalk-surface-below-ring'].value_counts())/len(data)*100"
      ],
      "metadata": {
        "id": "dE5iTrhRFLbZ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "db165f4d-e107-40aa-bea3-885c690b9e0e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "smooth     60.758247\n",
              "silky      28.360414\n",
              "fibrous     7.385524\n",
              "scaly       3.495815\n",
              "Name: stalk-surface-below-ring, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['stalk-color-above-ring']=data['stalk-color-above-ring'].replace(['n','b','c','g','o','p','e','w','y'],['brown','buff','cinnamon','gray','orange', 'pink','red','white','yellow'])"
      ],
      "metadata": {
        "id": "54lPLHubFSFG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data['stalk-color-above-ring'].value_counts()"
      ],
      "metadata": {
        "id": "wlswenJfF-ze",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2b3b3c03-49a8-4bac-8340-b04e5bd7db34"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "white       4464\n",
              "pink        1872\n",
              "gray         576\n",
              "brown        448\n",
              "buff         432\n",
              "orange       192\n",
              "red           96\n",
              "cinnamon      36\n",
              "yellow         8\n",
              "Name: stalk-color-above-ring, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "(data['stalk-color-above-ring'].value_counts())/len(data)*100"
      ],
      "metadata": {
        "id": "LXrNdMyNGIG6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e0ff218a-7ba3-4bf2-e5cb-d4ef7e51b362"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "white       54.948301\n",
              "pink        23.042836\n",
              "gray         7.090103\n",
              "brown        5.514525\n",
              "buff         5.317578\n",
              "orange       2.363368\n",
              "red          1.181684\n",
              "cinnamon     0.443131\n",
              "yellow       0.098474\n",
              "Name: stalk-color-above-ring, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 53
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['stalk-color-below-ring']=data['stalk-color-below-ring'].replace(['n','b','c','g','o','p','e','w','y'],['brown','buff','cinnamon','gray','orange', 'pink','red','white','yellow'])"
      ],
      "metadata": {
        "id": "rcwbGMWOGSqB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data['stalk-color-below-ring'].value_counts()"
      ],
      "metadata": {
        "id": "TFy9rgDCHHrA",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "525cf079-918c-4119-de4b-36dd5a724022"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "white       4384\n",
              "pink        1872\n",
              "gray         576\n",
              "brown        512\n",
              "buff         432\n",
              "orange       192\n",
              "red           96\n",
              "cinnamon      36\n",
              "yellow        24\n",
              "Name: stalk-color-below-ring, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "(data['stalk-color-below-ring'].value_counts())/len(data)*100"
      ],
      "metadata": {
        "id": "n73y0cjiHQp0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "127abcfb-f07b-41eb-fad7-64063bd642cb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "white       53.963565\n",
              "pink        23.042836\n",
              "gray         7.090103\n",
              "brown        6.302314\n",
              "buff         5.317578\n",
              "orange       2.363368\n",
              "red          1.181684\n",
              "cinnamon     0.443131\n",
              "yellow       0.295421\n",
              "Name: stalk-color-below-ring, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 56
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['veil-type']=data['veil-type'].replace(['p','u'],['partial','universal'])"
      ],
      "metadata": {
        "id": "L8GCbhIFHWsa"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data['veil-type'].value_counts()"
      ],
      "metadata": {
        "id": "2VZOjyJXH2nC",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2dee5dbf-a734-421c-fa40-05d072c97aad"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "partial    8124\n",
              "Name: veil-type, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 58
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "(data['veil-type'].value_counts())/len(data)*100"
      ],
      "metadata": {
        "id": "iDv0O7xfH8Z2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "763067c9-ec78-44a7-cd8c-d52f1ce2e71f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "partial    100.0\n",
              "Name: veil-type, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['veil-color']=data['veil-color'].replace(['n','o','w','y'],['brown','orange','white','yellow'])"
      ],
      "metadata": {
        "id": "LX0hCJCGIE59"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data['veil-color'].value_counts()"
      ],
      "metadata": {
        "id": "jX-Bv5T4I0Je",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3b6e5897-f85d-4b57-cb49-56e3cbf46e20"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "white     7924\n",
              "brown       96\n",
              "orange      96\n",
              "yellow       8\n",
              "Name: veil-color, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 61
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "(data['veil-color'].value_counts())/len(data)*100"
      ],
      "metadata": {
        "id": "LG7q5ea8I52R",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6191b1b6-9581-4eb5-ee5d-98d4e640e914"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "white     97.538159\n",
              "brown      1.181684\n",
              "orange     1.181684\n",
              "yellow     0.098474\n",
              "Name: veil-color, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 62
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['ring-number']=data['ring-number'].replace(['n','o','t'],['none','one','two'])"
      ],
      "metadata": {
        "id": "wOZOdyfzJDBX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data['ring-number'].value_counts()"
      ],
      "metadata": {
        "id": "xfDNxXFcJ3dG",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7ae73f63-b4b9-4647-8ee0-9e9e0fa12098"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "one     7488\n",
              "two      600\n",
              "none      36\n",
              "Name: ring-number, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 64
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "(data['ring-number'].value_counts())/len(data)*100"
      ],
      "metadata": {
        "id": "Nm7nsmL4J_BL",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "abf30586-92d4-469f-fa14-5ed409600d0b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "one     92.171344\n",
              "two      7.385524\n",
              "none     0.443131\n",
              "Name: ring-number, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 65
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['ring-type']=data['ring-type'].replace(['c','e','f','l','n','p','s','z'],\n",
        " ['cobwebby','evanescent','flaring','large', 'none','pendant','sheathing','zone'])"
      ],
      "metadata": {
        "id": "0CRebRuZKF3s"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data['ring-type'].value_counts()"
      ],
      "metadata": {
        "id": "1SYX4nypMQSc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6bda964d-2fdd-445a-fa6f-9542188f8393"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "pendant       3968\n",
              "evanescent    2776\n",
              "large         1296\n",
              "flaring         48\n",
              "none            36\n",
              "Name: ring-type, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 67
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "(data['ring-type'].value_counts())/len(data)*100"
      ],
      "metadata": {
        "id": "luwTv8w8MVUD",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "de951e2a-06aa-4238-e365-7bb0f14d6b91"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "pendant       48.842935\n",
              "evanescent    34.170359\n",
              "large         15.952733\n",
              "flaring        0.590842\n",
              "none           0.443131\n",
              "Name: ring-type, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 68
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['spore-print-color']=data['spore-print-color'].replace(['k','n','b','h','r','o','u','w','y'],\n",
        " ['black','brown','buff','chocolate','green', 'orange','purple','white','yellow'])"
      ],
      "metadata": {
        "id": "PgQSFpjVMb8p"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data['spore-print-color'].value_counts()"
      ],
      "metadata": {
        "id": "xOCK8xaDNPWG",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "077f32aa-f254-4acd-98f6-a08f6f2e7712"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "white        2388\n",
              "brown        1968\n",
              "black        1872\n",
              "chocolate    1632\n",
              "green          72\n",
              "purple         48\n",
              "orange         48\n",
              "yellow         48\n",
              "buff           48\n",
              "Name: spore-print-color, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 70
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "(data['spore-print-color'].value_counts())/len(data)*100"
      ],
      "metadata": {
        "id": "YhavJDxlNaQ3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "df1f87bd-662f-4db8-85fd-1f685edf575c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "white        29.394387\n",
              "brown        24.224520\n",
              "black        23.042836\n",
              "chocolate    20.088626\n",
              "green         0.886263\n",
              "purple        0.590842\n",
              "orange        0.590842\n",
              "yellow        0.590842\n",
              "buff          0.590842\n",
              "Name: spore-print-color, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 71
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['population']=data['population'].replace(['a','c','n','s','v','y'],\n",
        " ['abundant','clustered','numerous', 'scattered','several','solitary'])"
      ],
      "metadata": {
        "id": "4OkxvWxXNmGt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data['population'].value_counts()"
      ],
      "metadata": {
        "id": "1k1rZTkTOQul",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6897b30a-15b4-4d41-d37d-5c6703f4f715"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "several      4040\n",
              "solitary     1712\n",
              "scattered    1248\n",
              "numerous      400\n",
              "abundant      384\n",
              "clustered     340\n",
              "Name: population, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 73
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "(data['population'].value_counts())/len(data)*100"
      ],
      "metadata": {
        "id": "n2aIQLAcOXNr",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8425c037-2072-4edc-df2f-fe2fd289c575"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "several      49.729197\n",
              "solitary     21.073363\n",
              "scattered    15.361891\n",
              "numerous      4.923683\n",
              "abundant      4.726736\n",
              "clustered     4.185130\n",
              "Name: population, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 74
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['habitat']=data['habitat'].replace(['g','l','m','p','u','w','d'],\n",
        " ['grasses','leaves','meadows','paths', 'urban','waste','woods'])"
      ],
      "metadata": {
        "id": "7fKjzq01OUgA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data['habitat'].value_counts()"
      ],
      "metadata": {
        "id": "OQGqFPw_PEER",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "16463746-cc9c-4d70-f091-293a51295ca4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "woods      3148\n",
              "grasses    2148\n",
              "paths      1144\n",
              "leaves      832\n",
              "urban       368\n",
              "meadows     292\n",
              "waste       192\n",
              "Name: habitat, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 76
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "(data['habitat'].value_counts())/len(data)*100"
      ],
      "metadata": {
        "id": "ZN-Nvz2OPIFI",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9cfb32f6-e372-40e9-b284-5c23c66b3aa8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "woods      38.749385\n",
              "grasses    26.440177\n",
              "paths      14.081733\n",
              "leaves     10.241260\n",
              "urban       4.529788\n",
              "meadows     3.594289\n",
              "waste       2.363368\n",
              "Name: habitat, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 77
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['ring-number']=data['ring-number'].replace(['none','one','two'],['0','1','2'])"
      ],
      "metadata": {
        "id": "IK_auHpJfOCJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data['ring-number'].value_counts()"
      ],
      "metadata": {
        "id": "l996k9ksfXbb",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8ab22fec-e2e9-4122-e5f4-75cc0f156d4e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1    7488\n",
              "2     600\n",
              "0      36\n",
              "Name: ring-number, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 79
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "(data['ring-number'].value_counts())/len(data)*100"
      ],
      "metadata": {
        "id": "yUu5LRgBffG9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5e4e9e85-adb5-461d-a983-c649c31afa58"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1    92.171344\n",
              "2     7.385524\n",
              "0     0.443131\n",
              "Name: ring-number, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 80
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Checking the missing values"
      ],
      "metadata": {
        "id": "_THa0rbF4WRC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data.isna().sum()"
      ],
      "metadata": {
        "id": "LObQADqW30yM",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3ed91c60-d544-4ed9-f267-67f02e4fe70b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Target                         0\n",
              "cap-shape                      0\n",
              "cap-surface                    0\n",
              "cap-color                      0\n",
              "bruises                        0\n",
              "odor                           0\n",
              "gill-attachment                0\n",
              "gill-spacing                   0\n",
              "gill-size                      0\n",
              "gill-color                     0\n",
              "stalk-shape                    0\n",
              "stalk-root                  2480\n",
              "stalk-surface-above-ring       0\n",
              "stalk-surface-below-ring       0\n",
              "stalk-color-above-ring         0\n",
              "stalk-color-below-ring         0\n",
              "veil-type                      0\n",
              "veil-color                     0\n",
              "ring-number                    0\n",
              "ring-type                      0\n",
              "spore-print-color              0\n",
              "population                     0\n",
              "habitat                        0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 81
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## % of missing value\n",
        "data['stalk-root'].isna().sum()/len(data)*100"
      ],
      "metadata": {
        "id": "CaTDL16q4kxz",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1832fc54-49ac-4156-cdc2-602ef7fe4b61"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "30.526834071885773"
            ]
          },
          "metadata": {},
          "execution_count": 82
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Converting categorical variables to numerical using one hot encoding"
      ],
      "metadata": {
        "id": "tPkGHo5VUS3b"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "dRhzrit-m8TO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data.iloc[:,[0,1,2,3,4,5,6,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22]].head()"
      ],
      "metadata": {
        "id": "U4BQnSOScTVh",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 308
        },
        "outputId": "d7d2fd74-d229-4e86-ce03-18045a53f653"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Target cap-shape cap-surface cap-color  bruises     odor  \\\n",
              "0  poisonous    convex      smooth     brown  bruises  pungent   \n",
              "1     edible    convex      smooth    yellow  bruises   almond   \n",
              "2     edible      bell      smooth     white  bruises    anise   \n",
              "3  poisonous    convex       scaly     white  bruises  pungent   \n",
              "4     edible    convex      smooth      gray       no     none   \n",
              "\n",
              "  gill-attachment gill-spacing gill-size gill-color  ...  \\\n",
              "0            free        close    narrow      black  ...   \n",
              "1            free        close     broad      black  ...   \n",
              "2            free        close     broad      brown  ...   \n",
              "3            free        close    narrow      brown  ...   \n",
              "4            free      crowded     broad      black  ...   \n",
              "\n",
              "  stalk-surface-below-ring stalk-color-above-ring stalk-color-below-ring  \\\n",
              "0                   smooth                  white                  white   \n",
              "1                   smooth                  white                  white   \n",
              "2                   smooth                  white                  white   \n",
              "3                   smooth                  white                  white   \n",
              "4                   smooth                  white                  white   \n",
              "\n",
              "  veil-type veil-color ring-number   ring-type spore-print-color population  \\\n",
              "0   partial      white           1     pendant             black  scattered   \n",
              "1   partial      white           1     pendant             brown   numerous   \n",
              "2   partial      white           1     pendant             brown   numerous   \n",
              "3   partial      white           1     pendant             black  scattered   \n",
              "4   partial      white           1  evanescent             brown   abundant   \n",
              "\n",
              "   habitat  \n",
              "0    urban  \n",
              "1  grasses  \n",
              "2  meadows  \n",
              "3    urban  \n",
              "4  grasses  \n",
              "\n",
              "[5 rows x 22 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3a2fa04a-8eb4-4dd2-a699-593be3540d7c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Target</th>\n",
              "      <th>cap-shape</th>\n",
              "      <th>cap-surface</th>\n",
              "      <th>cap-color</th>\n",
              "      <th>bruises</th>\n",
              "      <th>odor</th>\n",
              "      <th>gill-attachment</th>\n",
              "      <th>gill-spacing</th>\n",
              "      <th>gill-size</th>\n",
              "      <th>gill-color</th>\n",
              "      <th>...</th>\n",
              "      <th>stalk-surface-below-ring</th>\n",
              "      <th>stalk-color-above-ring</th>\n",
              "      <th>stalk-color-below-ring</th>\n",
              "      <th>veil-type</th>\n",
              "      <th>veil-color</th>\n",
              "      <th>ring-number</th>\n",
              "      <th>ring-type</th>\n",
              "      <th>spore-print-color</th>\n",
              "      <th>population</th>\n",
              "      <th>habitat</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>poisonous</td>\n",
              "      <td>convex</td>\n",
              "      <td>smooth</td>\n",
              "      <td>brown</td>\n",
              "      <td>bruises</td>\n",
              "      <td>pungent</td>\n",
              "      <td>free</td>\n",
              "      <td>close</td>\n",
              "      <td>narrow</td>\n",
              "      <td>black</td>\n",
              "      <td>...</td>\n",
              "      <td>smooth</td>\n",
              "      <td>white</td>\n",
              "      <td>white</td>\n",
              "      <td>partial</td>\n",
              "      <td>white</td>\n",
              "      <td>1</td>\n",
              "      <td>pendant</td>\n",
              "      <td>black</td>\n",
              "      <td>scattered</td>\n",
              "      <td>urban</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>edible</td>\n",
              "      <td>convex</td>\n",
              "      <td>smooth</td>\n",
              "      <td>yellow</td>\n",
              "      <td>bruises</td>\n",
              "      <td>almond</td>\n",
              "      <td>free</td>\n",
              "      <td>close</td>\n",
              "      <td>broad</td>\n",
              "      <td>black</td>\n",
              "      <td>...</td>\n",
              "      <td>smooth</td>\n",
              "      <td>white</td>\n",
              "      <td>white</td>\n",
              "      <td>partial</td>\n",
              "      <td>white</td>\n",
              "      <td>1</td>\n",
              "      <td>pendant</td>\n",
              "      <td>brown</td>\n",
              "      <td>numerous</td>\n",
              "      <td>grasses</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>edible</td>\n",
              "      <td>bell</td>\n",
              "      <td>smooth</td>\n",
              "      <td>white</td>\n",
              "      <td>bruises</td>\n",
              "      <td>anise</td>\n",
              "      <td>free</td>\n",
              "      <td>close</td>\n",
              "      <td>broad</td>\n",
              "      <td>brown</td>\n",
              "      <td>...</td>\n",
              "      <td>smooth</td>\n",
              "      <td>white</td>\n",
              "      <td>white</td>\n",
              "      <td>partial</td>\n",
              "      <td>white</td>\n",
              "      <td>1</td>\n",
              "      <td>pendant</td>\n",
              "      <td>brown</td>\n",
              "      <td>numerous</td>\n",
              "      <td>meadows</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>poisonous</td>\n",
              "      <td>convex</td>\n",
              "      <td>scaly</td>\n",
              "      <td>white</td>\n",
              "      <td>bruises</td>\n",
              "      <td>pungent</td>\n",
              "      <td>free</td>\n",
              "      <td>close</td>\n",
              "      <td>narrow</td>\n",
              "      <td>brown</td>\n",
              "      <td>...</td>\n",
              "      <td>smooth</td>\n",
              "      <td>white</td>\n",
              "      <td>white</td>\n",
              "      <td>partial</td>\n",
              "      <td>white</td>\n",
              "      <td>1</td>\n",
              "      <td>pendant</td>\n",
              "      <td>black</td>\n",
              "      <td>scattered</td>\n",
              "      <td>urban</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>edible</td>\n",
              "      <td>convex</td>\n",
              "      <td>smooth</td>\n",
              "      <td>gray</td>\n",
              "      <td>no</td>\n",
              "      <td>none</td>\n",
              "      <td>free</td>\n",
              "      <td>crowded</td>\n",
              "      <td>broad</td>\n",
              "      <td>black</td>\n",
              "      <td>...</td>\n",
              "      <td>smooth</td>\n",
              "      <td>white</td>\n",
              "      <td>white</td>\n",
              "      <td>partial</td>\n",
              "      <td>white</td>\n",
              "      <td>1</td>\n",
              "      <td>evanescent</td>\n",
              "      <td>brown</td>\n",
              "      <td>abundant</td>\n",
              "      <td>grasses</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 22 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3a2fa04a-8eb4-4dd2-a699-593be3540d7c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3a2fa04a-8eb4-4dd2-a699-593be3540d7c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3a2fa04a-8eb4-4dd2-a699-593be3540d7c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b7ef855e-9f3d-4c4a-8290-5dddf4dc3f49\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b7ef855e-9f3d-4c4a-8290-5dddf4dc3f49')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b7ef855e-9f3d-4c4a-8290-5dddf4dc3f49 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 83
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_dummies=(pd.get_dummies(data.iloc[:,[0,1,2,3,4,5,6,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22]],columns=data.iloc[:,[0,1,2,3,4,5,6,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22]].columns))"
      ],
      "metadata": {
        "id": "_YhMl-P3VAqq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data_dummies=pd.concat([data_dummies,data['stalk-root']],axis=1)"
      ],
      "metadata": {
        "id": "5Ilqhh0sWdyk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data_dummies.head()"
      ],
      "metadata": {
        "id": "-nACcCtXeM0a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 273
        },
        "outputId": "6d579115-9e9d-405c-b70a-f2aa7078b111"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Target_edible  Target_poisonous  cap-shape_bell  cap-shape_conical  \\\n",
              "0              0                 1               0                  0   \n",
              "1              1                 0               0                  0   \n",
              "2              1                 0               1                  0   \n",
              "3              0                 1               0                  0   \n",
              "4              1                 0               0                  0   \n",
              "\n",
              "   cap-shape_convex  cap-shape_flat  cap-shape_knobbed  cap-shape_sunken  \\\n",
              "0                 1               0                  0                 0   \n",
              "1                 1               0                  0                 0   \n",
              "2                 0               0                  0                 0   \n",
              "3                 1               0                  0                 0   \n",
              "4                 1               0                  0                 0   \n",
              "\n",
              "   cap-surface_fibrous  cap-surface_grooves  ...  population_several  \\\n",
              "0                    0                    0  ...                   0   \n",
              "1                    0                    0  ...                   0   \n",
              "2                    0                    0  ...                   0   \n",
              "3                    0                    0  ...                   0   \n",
              "4                    0                    0  ...                   0   \n",
              "\n",
              "   population_solitary  habitat_grasses  habitat_leaves  habitat_meadows  \\\n",
              "0                    0                0               0                0   \n",
              "1                    0                1               0                0   \n",
              "2                    0                0               0                1   \n",
              "3                    0                0               0                0   \n",
              "4                    0                1               0                0   \n",
              "\n",
              "   habitat_paths  habitat_urban  habitat_waste  habitat_woods  stalk-root  \n",
              "0              0              1              0              0       equal  \n",
              "1              0              0              0              0        club  \n",
              "2              0              0              0              0        club  \n",
              "3              0              1              0              0       equal  \n",
              "4              0              0              0              0       equal  \n",
              "\n",
              "[5 rows x 115 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b513cff9-894f-4db0-b6d5-a7cb6cfb72bd\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Target_edible</th>\n",
              "      <th>Target_poisonous</th>\n",
              "      <th>cap-shape_bell</th>\n",
              "      <th>cap-shape_conical</th>\n",
              "      <th>cap-shape_convex</th>\n",
              "      <th>cap-shape_flat</th>\n",
              "      <th>cap-shape_knobbed</th>\n",
              "      <th>cap-shape_sunken</th>\n",
              "      <th>cap-surface_fibrous</th>\n",
              "      <th>cap-surface_grooves</th>\n",
              "      <th>...</th>\n",
              "      <th>population_several</th>\n",
              "      <th>population_solitary</th>\n",
              "      <th>habitat_grasses</th>\n",
              "      <th>habitat_leaves</th>\n",
              "      <th>habitat_meadows</th>\n",
              "      <th>habitat_paths</th>\n",
              "      <th>habitat_urban</th>\n",
              "      <th>habitat_waste</th>\n",
              "      <th>habitat_woods</th>\n",
              "      <th>stalk-root</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>equal</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>club</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>club</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>equal</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>equal</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 115 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b513cff9-894f-4db0-b6d5-a7cb6cfb72bd')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b513cff9-894f-4db0-b6d5-a7cb6cfb72bd button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b513cff9-894f-4db0-b6d5-a7cb6cfb72bd');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-328577c0-7182-41ff-82e1-b7a0417576b3\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-328577c0-7182-41ff-82e1-b7a0417576b3')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-328577c0-7182-41ff-82e1-b7a0417576b3 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 86
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_dummies['stalk-root'].isna().sum()/len(data)*100"
      ],
      "metadata": {
        "id": "5vFHCwlre8CP",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "cdf7bfda-f48e-45ec-d235-1e6946dc9683"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "30.526834071885773"
            ]
          },
          "metadata": {},
          "execution_count": 87
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_dummies['stalk-root'] = data_dummies['stalk-root'].replace(['bulbous','club','cup','equal','rhizomorphs','rooted'],[1,2,3,4,5,6])"
      ],
      "metadata": {
        "id": "w9K0wonEZuDC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data_dummies['stalk-root'].value_counts()"
      ],
      "metadata": {
        "id": "tRtKBNZsZpJB",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c8b8b873-1026-46e1-ba34-71ac18d3fde1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.0    3776\n",
              "4.0    1120\n",
              "2.0     556\n",
              "6.0     192\n",
              "Name: stalk-root, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 89
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_dummies.head()"
      ],
      "metadata": {
        "id": "L0U7b1xcfLLj",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 273
        },
        "outputId": "e9a604d4-4029-4e85-c7ab-4c4428501c2c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Target_edible  Target_poisonous  cap-shape_bell  cap-shape_conical  \\\n",
              "0              0                 1               0                  0   \n",
              "1              1                 0               0                  0   \n",
              "2              1                 0               1                  0   \n",
              "3              0                 1               0                  0   \n",
              "4              1                 0               0                  0   \n",
              "\n",
              "   cap-shape_convex  cap-shape_flat  cap-shape_knobbed  cap-shape_sunken  \\\n",
              "0                 1               0                  0                 0   \n",
              "1                 1               0                  0                 0   \n",
              "2                 0               0                  0                 0   \n",
              "3                 1               0                  0                 0   \n",
              "4                 1               0                  0                 0   \n",
              "\n",
              "   cap-surface_fibrous  cap-surface_grooves  ...  population_several  \\\n",
              "0                    0                    0  ...                   0   \n",
              "1                    0                    0  ...                   0   \n",
              "2                    0                    0  ...                   0   \n",
              "3                    0                    0  ...                   0   \n",
              "4                    0                    0  ...                   0   \n",
              "\n",
              "   population_solitary  habitat_grasses  habitat_leaves  habitat_meadows  \\\n",
              "0                    0                0               0                0   \n",
              "1                    0                1               0                0   \n",
              "2                    0                0               0                1   \n",
              "3                    0                0               0                0   \n",
              "4                    0                1               0                0   \n",
              "\n",
              "   habitat_paths  habitat_urban  habitat_waste  habitat_woods  stalk-root  \n",
              "0              0              1              0              0         4.0  \n",
              "1              0              0              0              0         2.0  \n",
              "2              0              0              0              0         2.0  \n",
              "3              0              1              0              0         4.0  \n",
              "4              0              0              0              0         4.0  \n",
              "\n",
              "[5 rows x 115 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d303634a-cbc3-485d-93a7-4a1d3c6231c4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Target_edible</th>\n",
              "      <th>Target_poisonous</th>\n",
              "      <th>cap-shape_bell</th>\n",
              "      <th>cap-shape_conical</th>\n",
              "      <th>cap-shape_convex</th>\n",
              "      <th>cap-shape_flat</th>\n",
              "      <th>cap-shape_knobbed</th>\n",
              "      <th>cap-shape_sunken</th>\n",
              "      <th>cap-surface_fibrous</th>\n",
              "      <th>cap-surface_grooves</th>\n",
              "      <th>...</th>\n",
              "      <th>population_several</th>\n",
              "      <th>population_solitary</th>\n",
              "      <th>habitat_grasses</th>\n",
              "      <th>habitat_leaves</th>\n",
              "      <th>habitat_meadows</th>\n",
              "      <th>habitat_paths</th>\n",
              "      <th>habitat_urban</th>\n",
              "      <th>habitat_waste</th>\n",
              "      <th>habitat_woods</th>\n",
              "      <th>stalk-root</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 115 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d303634a-cbc3-485d-93a7-4a1d3c6231c4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d303634a-cbc3-485d-93a7-4a1d3c6231c4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d303634a-cbc3-485d-93a7-4a1d3c6231c4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-15ef71e8-730d-44a1-be1e-300fc1c50f0e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-15ef71e8-730d-44a1-be1e-300fc1c50f0e')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-15ef71e8-730d-44a1-be1e-300fc1c50f0e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 90
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_dummies.columns.tolist()"
      ],
      "metadata": {
        "id": "isWUMHCIbTAU",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4729379b-836f-43be-80c8-6d4a471ce709"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['Target_edible',\n",
              " 'Target_poisonous',\n",
              " 'cap-shape_bell',\n",
              " 'cap-shape_conical',\n",
              " 'cap-shape_convex',\n",
              " 'cap-shape_flat',\n",
              " 'cap-shape_knobbed',\n",
              " 'cap-shape_sunken',\n",
              " 'cap-surface_fibrous',\n",
              " 'cap-surface_grooves',\n",
              " 'cap-surface_scaly',\n",
              " 'cap-surface_smooth',\n",
              " 'cap-color_brown',\n",
              " 'cap-color_buff',\n",
              " 'cap-color_cinnamon',\n",
              " 'cap-color_gray',\n",
              " 'cap-color_green',\n",
              " 'cap-color_pink',\n",
              " 'cap-color_purple',\n",
              " 'cap-color_red',\n",
              " 'cap-color_white',\n",
              " 'cap-color_yellow',\n",
              " 'bruises_bruises',\n",
              " 'bruises_no',\n",
              " 'odor_almond',\n",
              " 'odor_anise',\n",
              " 'odor_creosote',\n",
              " 'odor_fishy',\n",
              " 'odor_foul',\n",
              " 'odor_musty',\n",
              " 'odor_none',\n",
              " 'odor_pungent',\n",
              " 'odor_spicy',\n",
              " 'gill-attachment_attached',\n",
              " 'gill-attachment_free',\n",
              " 'gill-spacing_close',\n",
              " 'gill-spacing_crowded',\n",
              " 'gill-size_broad',\n",
              " 'gill-size_narrow',\n",
              " 'gill-color_black',\n",
              " 'gill-color_brown',\n",
              " 'gill-color_buff',\n",
              " 'gill-color_chocolate',\n",
              " 'gill-color_gray',\n",
              " 'gill-color_green',\n",
              " 'gill-color_orange',\n",
              " 'gill-color_pink',\n",
              " 'gill-color_purple',\n",
              " 'gill-color_red',\n",
              " 'gill-color_white',\n",
              " 'gill-color_yellow',\n",
              " 'stalk-shape_enlarging',\n",
              " 'stalk-shape_tapering',\n",
              " 'stalk-surface-above-ring_fibrous',\n",
              " 'stalk-surface-above-ring_scaly',\n",
              " 'stalk-surface-above-ring_silky',\n",
              " 'stalk-surface-above-ring_smooth',\n",
              " 'stalk-surface-below-ring_fibrous',\n",
              " 'stalk-surface-below-ring_scaly',\n",
              " 'stalk-surface-below-ring_silky',\n",
              " 'stalk-surface-below-ring_smooth',\n",
              " 'stalk-color-above-ring_brown',\n",
              " 'stalk-color-above-ring_buff',\n",
              " 'stalk-color-above-ring_cinnamon',\n",
              " 'stalk-color-above-ring_gray',\n",
              " 'stalk-color-above-ring_orange',\n",
              " 'stalk-color-above-ring_pink',\n",
              " 'stalk-color-above-ring_red',\n",
              " 'stalk-color-above-ring_white',\n",
              " 'stalk-color-above-ring_yellow',\n",
              " 'stalk-color-below-ring_brown',\n",
              " 'stalk-color-below-ring_buff',\n",
              " 'stalk-color-below-ring_cinnamon',\n",
              " 'stalk-color-below-ring_gray',\n",
              " 'stalk-color-below-ring_orange',\n",
              " 'stalk-color-below-ring_pink',\n",
              " 'stalk-color-below-ring_red',\n",
              " 'stalk-color-below-ring_white',\n",
              " 'stalk-color-below-ring_yellow',\n",
              " 'veil-type_partial',\n",
              " 'veil-color_brown',\n",
              " 'veil-color_orange',\n",
              " 'veil-color_white',\n",
              " 'veil-color_yellow',\n",
              " 'ring-number_0',\n",
              " 'ring-number_1',\n",
              " 'ring-number_2',\n",
              " 'ring-type_evanescent',\n",
              " 'ring-type_flaring',\n",
              " 'ring-type_large',\n",
              " 'ring-type_none',\n",
              " 'ring-type_pendant',\n",
              " 'spore-print-color_black',\n",
              " 'spore-print-color_brown',\n",
              " 'spore-print-color_buff',\n",
              " 'spore-print-color_chocolate',\n",
              " 'spore-print-color_green',\n",
              " 'spore-print-color_orange',\n",
              " 'spore-print-color_purple',\n",
              " 'spore-print-color_white',\n",
              " 'spore-print-color_yellow',\n",
              " 'population_abundant',\n",
              " 'population_clustered',\n",
              " 'population_numerous',\n",
              " 'population_scattered',\n",
              " 'population_several',\n",
              " 'population_solitary',\n",
              " 'habitat_grasses',\n",
              " 'habitat_leaves',\n",
              " 'habitat_meadows',\n",
              " 'habitat_paths',\n",
              " 'habitat_urban',\n",
              " 'habitat_waste',\n",
              " 'habitat_woods',\n",
              " 'stalk-root']"
            ]
          },
          "metadata": {},
          "execution_count": 91
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.impute import KNNImputer\n",
        "knn_imputer = KNNImputer(n_neighbors=5)\n",
        "imputed_data = knn_imputer.fit_transform(data_dummies)\n",
        "imputed_df = pd.DataFrame(imputed_data,columns=data_dummies.columns)"
      ],
      "metadata": {
        "id": "bdf5RSAoaE-D"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "imputed_df.head()"
      ],
      "metadata": {
        "id": "aHy3Lw-vbN2h",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 273
        },
        "outputId": "c7655369-0093-4e3d-8b71-b1016aa1baba"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Target_edible  Target_poisonous  cap-shape_bell  cap-shape_conical  \\\n",
              "0            0.0               1.0             0.0                0.0   \n",
              "1            1.0               0.0             0.0                0.0   \n",
              "2            1.0               0.0             1.0                0.0   \n",
              "3            0.0               1.0             0.0                0.0   \n",
              "4            1.0               0.0             0.0                0.0   \n",
              "\n",
              "   cap-shape_convex  cap-shape_flat  cap-shape_knobbed  cap-shape_sunken  \\\n",
              "0               1.0             0.0                0.0               0.0   \n",
              "1               1.0             0.0                0.0               0.0   \n",
              "2               0.0             0.0                0.0               0.0   \n",
              "3               1.0             0.0                0.0               0.0   \n",
              "4               1.0             0.0                0.0               0.0   \n",
              "\n",
              "   cap-surface_fibrous  cap-surface_grooves  ...  population_several  \\\n",
              "0                  0.0                  0.0  ...                 0.0   \n",
              "1                  0.0                  0.0  ...                 0.0   \n",
              "2                  0.0                  0.0  ...                 0.0   \n",
              "3                  0.0                  0.0  ...                 0.0   \n",
              "4                  0.0                  0.0  ...                 0.0   \n",
              "\n",
              "   population_solitary  habitat_grasses  habitat_leaves  habitat_meadows  \\\n",
              "0                  0.0              0.0             0.0              0.0   \n",
              "1                  0.0              1.0             0.0              0.0   \n",
              "2                  0.0              0.0             0.0              1.0   \n",
              "3                  0.0              0.0             0.0              0.0   \n",
              "4                  0.0              1.0             0.0              0.0   \n",
              "\n",
              "   habitat_paths  habitat_urban  habitat_waste  habitat_woods  stalk-root  \n",
              "0            0.0            1.0            0.0            0.0         4.0  \n",
              "1            0.0            0.0            0.0            0.0         2.0  \n",
              "2            0.0            0.0            0.0            0.0         2.0  \n",
              "3            0.0            1.0            0.0            0.0         4.0  \n",
              "4            0.0            0.0            0.0            0.0         4.0  \n",
              "\n",
              "[5 rows x 115 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-79b65939-7790-4a00-aed1-67821db1bc10\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Target_edible</th>\n",
              "      <th>Target_poisonous</th>\n",
              "      <th>cap-shape_bell</th>\n",
              "      <th>cap-shape_conical</th>\n",
              "      <th>cap-shape_convex</th>\n",
              "      <th>cap-shape_flat</th>\n",
              "      <th>cap-shape_knobbed</th>\n",
              "      <th>cap-shape_sunken</th>\n",
              "      <th>cap-surface_fibrous</th>\n",
              "      <th>cap-surface_grooves</th>\n",
              "      <th>...</th>\n",
              "      <th>population_several</th>\n",
              "      <th>population_solitary</th>\n",
              "      <th>habitat_grasses</th>\n",
              "      <th>habitat_leaves</th>\n",
              "      <th>habitat_meadows</th>\n",
              "      <th>habitat_paths</th>\n",
              "      <th>habitat_urban</th>\n",
              "      <th>habitat_waste</th>\n",
              "      <th>habitat_woods</th>\n",
              "      <th>stalk-root</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 115 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-79b65939-7790-4a00-aed1-67821db1bc10')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-79b65939-7790-4a00-aed1-67821db1bc10 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-79b65939-7790-4a00-aed1-67821db1bc10');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-8b584b63-05a6-4a60-8842-22f3ba6439da\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8b584b63-05a6-4a60-8842-22f3ba6439da')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-8b584b63-05a6-4a60-8842-22f3ba6439da button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 93
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "imputed_df['stalk-root'].value_counts()"
      ],
      "metadata": {
        "id": "o6ii6tQ-eq4M",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8a9ec596-d1f6-41b1-d3ef-0fb271b52bde"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.0    5411\n",
              "4.0    1391\n",
              "2.0     563\n",
              "6.0     192\n",
              "1.6     136\n",
              "3.4     133\n",
              "2.8     108\n",
              "2.2     103\n",
              "1.8      28\n",
              "3.6      16\n",
              "1.2      13\n",
              "3.2      10\n",
              "2.4       8\n",
              "1.4       5\n",
              "3.0       5\n",
              "2.6       2\n",
              "Name: stalk-root, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 94
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import math\n",
        "imputed_df['stalk-root']=imputed_df['stalk-root'].apply(math.ceil)"
      ],
      "metadata": {
        "id": "TSL6Lv1cfVET"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "imputed_df['stalk-root'] = imputed_df['stalk-root'].replace([1,2,3,4,5,6],['bulbous','club','cup','equal','rhizomorphs','rooted'])"
      ],
      "metadata": {
        "id": "rSpqcDZwg1Vr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "imputed_df['stalk-root'].value_counts()"
      ],
      "metadata": {
        "id": "slf1v9zhhD0r",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2c96b124-8fc2-4854-abfb-8f1fc114e7e5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "bulbous    5411\n",
              "equal      1550\n",
              "club        745\n",
              "cup         226\n",
              "rooted      192\n",
              "Name: stalk-root, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 97
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "imputed_df['stalk-root'].isna().sum()"
      ],
      "metadata": {
        "id": "YOBjiXv3hCwY",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "65186a44-fccb-4602-f3ba-8f1a08287646"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 98
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data2=pd.concat([data.drop('stalk-root',axis=1),imputed_df['stalk-root']],axis=1)"
      ],
      "metadata": {
        "id": "sHiWukcRlu2w"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data_dummies2=pd.get_dummies(imputed_df['stalk-root'])"
      ],
      "metadata": {
        "id": "lbfaHfiPhMts"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "imputed_df=pd.concat([imputed_df,data_dummies2],axis=1)\n"
      ],
      "metadata": {
        "id": "qkAIwtH9cbt1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "imputed_df.drop('stalk-root',axis=1,inplace=True)"
      ],
      "metadata": {
        "id": "DUKImhcYfki_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "imputed_df.drop('Target_edible',axis=1,inplace=True)"
      ],
      "metadata": {
        "id": "CGvoeR76Hjwo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "imputed_df.head()"
      ],
      "metadata": {
        "id": "TFsnqqikhb7K",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 273
        },
        "outputId": "b61cc1c8-380d-4725-ee9e-8d7d99ae2c61"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Target_poisonous  cap-shape_bell  cap-shape_conical  cap-shape_convex  \\\n",
              "0               1.0             0.0                0.0               1.0   \n",
              "1               0.0             0.0                0.0               1.0   \n",
              "2               0.0             1.0                0.0               0.0   \n",
              "3               1.0             0.0                0.0               1.0   \n",
              "4               0.0             0.0                0.0               1.0   \n",
              "\n",
              "   cap-shape_flat  cap-shape_knobbed  cap-shape_sunken  cap-surface_fibrous  \\\n",
              "0             0.0                0.0               0.0                  0.0   \n",
              "1             0.0                0.0               0.0                  0.0   \n",
              "2             0.0                0.0               0.0                  0.0   \n",
              "3             0.0                0.0               0.0                  0.0   \n",
              "4             0.0                0.0               0.0                  0.0   \n",
              "\n",
              "   cap-surface_grooves  cap-surface_scaly  ...  habitat_meadows  \\\n",
              "0                  0.0                0.0  ...              0.0   \n",
              "1                  0.0                0.0  ...              0.0   \n",
              "2                  0.0                0.0  ...              1.0   \n",
              "3                  0.0                1.0  ...              0.0   \n",
              "4                  0.0                0.0  ...              0.0   \n",
              "\n",
              "   habitat_paths  habitat_urban  habitat_waste  habitat_woods  bulbous  club  \\\n",
              "0            0.0            1.0            0.0            0.0        0     0   \n",
              "1            0.0            0.0            0.0            0.0        0     1   \n",
              "2            0.0            0.0            0.0            0.0        0     1   \n",
              "3            0.0            1.0            0.0            0.0        0     0   \n",
              "4            0.0            0.0            0.0            0.0        0     0   \n",
              "\n",
              "   cup  equal  rooted  \n",
              "0    0      1       0  \n",
              "1    0      0       0  \n",
              "2    0      0       0  \n",
              "3    0      1       0  \n",
              "4    0      1       0  \n",
              "\n",
              "[5 rows x 118 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-01279d74-7582-4c42-ab5c-ce120b299e0d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Target_poisonous</th>\n",
              "      <th>cap-shape_bell</th>\n",
              "      <th>cap-shape_conical</th>\n",
              "      <th>cap-shape_convex</th>\n",
              "      <th>cap-shape_flat</th>\n",
              "      <th>cap-shape_knobbed</th>\n",
              "      <th>cap-shape_sunken</th>\n",
              "      <th>cap-surface_fibrous</th>\n",
              "      <th>cap-surface_grooves</th>\n",
              "      <th>cap-surface_scaly</th>\n",
              "      <th>...</th>\n",
              "      <th>habitat_meadows</th>\n",
              "      <th>habitat_paths</th>\n",
              "      <th>habitat_urban</th>\n",
              "      <th>habitat_waste</th>\n",
              "      <th>habitat_woods</th>\n",
              "      <th>bulbous</th>\n",
              "      <th>club</th>\n",
              "      <th>cup</th>\n",
              "      <th>equal</th>\n",
              "      <th>rooted</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 118 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-01279d74-7582-4c42-ab5c-ce120b299e0d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-01279d74-7582-4c42-ab5c-ce120b299e0d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-01279d74-7582-4c42-ab5c-ce120b299e0d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-8af986ff-dcd5-4076-a912-e94bfb21f34d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8af986ff-dcd5-4076-a912-e94bfb21f34d')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-8af986ff-dcd5-4076-a912-e94bfb21f34d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 104
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "EDA"
      ],
      "metadata": {
        "id": "bpK1VXRAhx13"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Exploring the cap features for mushrooms"
      ],
      "metadata": {
        "id": "sB31KfeflNpv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "fig, axes =plt.subplots(2,2,figsize=(20,10))\n",
        "category_counts = np.array(data['cap-shape'].value_counts().index)\n",
        "#print(category_counts)\n",
        "sns.countplot(x='cap-shape',data=data,palette='bright',ax=axes[0,0],hue='Target',order=category_counts)\n",
        "axes[0,0].set_title('Target ~ cap-shape')\n",
        "category_counts = np.array(data['cap-surface'].value_counts().index)\n",
        "sns.countplot(x='cap-surface',data=data,palette='Set3',ax=axes[0,1],hue='Target',order=category_counts)\n",
        "axes[0,1].set_title('Target ~ cap-surface')\n",
        "category_counts = np.array(data['cap-color'].value_counts().index)\n",
        "sns.countplot(x='cap-color',data=data,palette='Set1',ax=axes[1,0],hue='Target',order=category_counts)\n",
        "axes[1,0].set_title('Target ~ cap-color')\n",
        "sns.countplot(x='bruises',data=data,palette='Set2',ax=axes[1,1],hue='Target')\n",
        "axes[1,1].set_title('Target ~ bruises')"
      ],
      "metadata": {
        "id": "0hMTSDSrh3i2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 725
        },
        "outputId": "b5712011-e812-4d65-b054-0393e8962b8c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Target ~ bruises')"
            ]
          },
          "metadata": {},
          "execution_count": 105
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x1000 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Instruction\n",
        "## Please write observations for above graphs"
      ],
      "metadata": {
        "id": "G-MDJiQYzQeY"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Exploring the gill features for mushrooms"
      ],
      "metadata": {
        "id": "hlDemt28tU9X"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data.iloc[:,[6,7,8,9,10,11,12,13,14]].head()"
      ],
      "metadata": {
        "id": "Oe9-gpM_j49-",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 224
        },
        "outputId": "15fd5f37-4a88-4010-b81d-88ac1c08cee8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  gill-attachment gill-spacing gill-size gill-color stalk-shape stalk-root  \\\n",
              "0            free        close    narrow      black   enlarging      equal   \n",
              "1            free        close     broad      black   enlarging       club   \n",
              "2            free        close     broad      brown   enlarging       club   \n",
              "3            free        close    narrow      brown   enlarging      equal   \n",
              "4            free      crowded     broad      black    tapering      equal   \n",
              "\n",
              "  stalk-surface-above-ring stalk-surface-below-ring stalk-color-above-ring  \n",
              "0                   smooth                   smooth                  white  \n",
              "1                   smooth                   smooth                  white  \n",
              "2                   smooth                   smooth                  white  \n",
              "3                   smooth                   smooth                  white  \n",
              "4                   smooth                   smooth                  white  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a8f32e63-22f6-45f1-a147-9c4b48e4fa74\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>gill-attachment</th>\n",
              "      <th>gill-spacing</th>\n",
              "      <th>gill-size</th>\n",
              "      <th>gill-color</th>\n",
              "      <th>stalk-shape</th>\n",
              "      <th>stalk-root</th>\n",
              "      <th>stalk-surface-above-ring</th>\n",
              "      <th>stalk-surface-below-ring</th>\n",
              "      <th>stalk-color-above-ring</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>free</td>\n",
              "      <td>close</td>\n",
              "      <td>narrow</td>\n",
              "      <td>black</td>\n",
              "      <td>enlarging</td>\n",
              "      <td>equal</td>\n",
              "      <td>smooth</td>\n",
              "      <td>smooth</td>\n",
              "      <td>white</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>free</td>\n",
              "      <td>close</td>\n",
              "      <td>broad</td>\n",
              "      <td>black</td>\n",
              "      <td>enlarging</td>\n",
              "      <td>club</td>\n",
              "      <td>smooth</td>\n",
              "      <td>smooth</td>\n",
              "      <td>white</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>free</td>\n",
              "      <td>close</td>\n",
              "      <td>broad</td>\n",
              "      <td>brown</td>\n",
              "      <td>enlarging</td>\n",
              "      <td>club</td>\n",
              "      <td>smooth</td>\n",
              "      <td>smooth</td>\n",
              "      <td>white</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>free</td>\n",
              "      <td>close</td>\n",
              "      <td>narrow</td>\n",
              "      <td>brown</td>\n",
              "      <td>enlarging</td>\n",
              "      <td>equal</td>\n",
              "      <td>smooth</td>\n",
              "      <td>smooth</td>\n",
              "      <td>white</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>free</td>\n",
              "      <td>crowded</td>\n",
              "      <td>broad</td>\n",
              "      <td>black</td>\n",
              "      <td>tapering</td>\n",
              "      <td>equal</td>\n",
              "      <td>smooth</td>\n",
              "      <td>smooth</td>\n",
              "      <td>white</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a8f32e63-22f6-45f1-a147-9c4b48e4fa74')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a8f32e63-22f6-45f1-a147-9c4b48e4fa74 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a8f32e63-22f6-45f1-a147-9c4b48e4fa74');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a75df1b3-9978-480f-8c37-0f580c1a8319\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a75df1b3-9978-480f-8c37-0f580c1a8319')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a75df1b3-9978-480f-8c37-0f580c1a8319 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 106
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fig, axes =plt.subplots(2,2,figsize=(20,10))\n",
        "sns.countplot(x='gill-attachment',data=data,palette='bright',ax=axes[0,0],hue='Target')\n",
        "axes[0,0].set_title('Target ~ gill-attachment')\n",
        "\n",
        "sns.countplot(x='gill-spacing',data=data,palette='Set3',ax=axes[0,1],hue='Target')\n",
        "axes[0,1].set_title('Target ~ gill-spacing')\n",
        "\n",
        "sns.countplot(x='gill-size',data=data,palette='Set1',ax=axes[1,0],hue='Target')\n",
        "axes[1,0].set_title('Target ~ gill-size')\n",
        "\n",
        "category_counts = np.array(data['gill-color'].value_counts().index)\n",
        "sns.countplot(x='gill-color',data=data,palette='Set2',ax=axes[1,1],hue='Target',order=category_counts)\n",
        "axes[1,1].set_title('Target ~ gill-color')"
      ],
      "metadata": {
        "id": "4iNd6HmMp5jQ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 725
        },
        "outputId": "146dd3b2-4982-451f-a6dd-a94e555602f4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Target ~ gill-color')"
            ]
          },
          "metadata": {},
          "execution_count": 107
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x1000 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Instructions:-\n",
        "## Please write observations for above graphs"
      ],
      "metadata": {
        "id": "VQz7Siq81Nh8"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Instructions:-\n",
        "* Create simlar graphs for other features like Stalk,veil,ring,...etc\n",
        "* Note the Observations"
      ],
      "metadata": {
        "id": "L8RcYXVey_b6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data.iloc[:,6:].head()"
      ],
      "metadata": {
        "id": "y-VmBMTrxn_f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 258
        },
        "outputId": "4bfee38c-e960-4dff-d715-e4a282bb9de4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  gill-attachment gill-spacing gill-size gill-color stalk-shape stalk-root  \\\n",
              "0            free        close    narrow      black   enlarging      equal   \n",
              "1            free        close     broad      black   enlarging       club   \n",
              "2            free        close     broad      brown   enlarging       club   \n",
              "3            free        close    narrow      brown   enlarging      equal   \n",
              "4            free      crowded     broad      black    tapering      equal   \n",
              "\n",
              "  stalk-surface-above-ring stalk-surface-below-ring stalk-color-above-ring  \\\n",
              "0                   smooth                   smooth                  white   \n",
              "1                   smooth                   smooth                  white   \n",
              "2                   smooth                   smooth                  white   \n",
              "3                   smooth                   smooth                  white   \n",
              "4                   smooth                   smooth                  white   \n",
              "\n",
              "  stalk-color-below-ring veil-type veil-color ring-number   ring-type  \\\n",
              "0                  white   partial      white           1     pendant   \n",
              "1                  white   partial      white           1     pendant   \n",
              "2                  white   partial      white           1     pendant   \n",
              "3                  white   partial      white           1     pendant   \n",
              "4                  white   partial      white           1  evanescent   \n",
              "\n",
              "  spore-print-color population  habitat  \n",
              "0             black  scattered    urban  \n",
              "1             brown   numerous  grasses  \n",
              "2             brown   numerous  meadows  \n",
              "3             black  scattered    urban  \n",
              "4             brown   abundant  grasses  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-24f68ca2-6ca9-442c-a877-8dde81ab8a18\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>gill-attachment</th>\n",
              "      <th>gill-spacing</th>\n",
              "      <th>gill-size</th>\n",
              "      <th>gill-color</th>\n",
              "      <th>stalk-shape</th>\n",
              "      <th>stalk-root</th>\n",
              "      <th>stalk-surface-above-ring</th>\n",
              "      <th>stalk-surface-below-ring</th>\n",
              "      <th>stalk-color-above-ring</th>\n",
              "      <th>stalk-color-below-ring</th>\n",
              "      <th>veil-type</th>\n",
              "      <th>veil-color</th>\n",
              "      <th>ring-number</th>\n",
              "      <th>ring-type</th>\n",
              "      <th>spore-print-color</th>\n",
              "      <th>population</th>\n",
              "      <th>habitat</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>free</td>\n",
              "      <td>close</td>\n",
              "      <td>narrow</td>\n",
              "      <td>black</td>\n",
              "      <td>enlarging</td>\n",
              "      <td>equal</td>\n",
              "      <td>smooth</td>\n",
              "      <td>smooth</td>\n",
              "      <td>white</td>\n",
              "      <td>white</td>\n",
              "      <td>partial</td>\n",
              "      <td>white</td>\n",
              "      <td>1</td>\n",
              "      <td>pendant</td>\n",
              "      <td>black</td>\n",
              "      <td>scattered</td>\n",
              "      <td>urban</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>free</td>\n",
              "      <td>close</td>\n",
              "      <td>broad</td>\n",
              "      <td>black</td>\n",
              "      <td>enlarging</td>\n",
              "      <td>club</td>\n",
              "      <td>smooth</td>\n",
              "      <td>smooth</td>\n",
              "      <td>white</td>\n",
              "      <td>white</td>\n",
              "      <td>partial</td>\n",
              "      <td>white</td>\n",
              "      <td>1</td>\n",
              "      <td>pendant</td>\n",
              "      <td>brown</td>\n",
              "      <td>numerous</td>\n",
              "      <td>grasses</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>free</td>\n",
              "      <td>close</td>\n",
              "      <td>broad</td>\n",
              "      <td>brown</td>\n",
              "      <td>enlarging</td>\n",
              "      <td>club</td>\n",
              "      <td>smooth</td>\n",
              "      <td>smooth</td>\n",
              "      <td>white</td>\n",
              "      <td>white</td>\n",
              "      <td>partial</td>\n",
              "      <td>white</td>\n",
              "      <td>1</td>\n",
              "      <td>pendant</td>\n",
              "      <td>brown</td>\n",
              "      <td>numerous</td>\n",
              "      <td>meadows</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>free</td>\n",
              "      <td>close</td>\n",
              "      <td>narrow</td>\n",
              "      <td>brown</td>\n",
              "      <td>enlarging</td>\n",
              "      <td>equal</td>\n",
              "      <td>smooth</td>\n",
              "      <td>smooth</td>\n",
              "      <td>white</td>\n",
              "      <td>white</td>\n",
              "      <td>partial</td>\n",
              "      <td>white</td>\n",
              "      <td>1</td>\n",
              "      <td>pendant</td>\n",
              "      <td>black</td>\n",
              "      <td>scattered</td>\n",
              "      <td>urban</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>free</td>\n",
              "      <td>crowded</td>\n",
              "      <td>broad</td>\n",
              "      <td>black</td>\n",
              "      <td>tapering</td>\n",
              "      <td>equal</td>\n",
              "      <td>smooth</td>\n",
              "      <td>smooth</td>\n",
              "      <td>white</td>\n",
              "      <td>white</td>\n",
              "      <td>partial</td>\n",
              "      <td>white</td>\n",
              "      <td>1</td>\n",
              "      <td>evanescent</td>\n",
              "      <td>brown</td>\n",
              "      <td>abundant</td>\n",
              "      <td>grasses</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-24f68ca2-6ca9-442c-a877-8dde81ab8a18')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-24f68ca2-6ca9-442c-a877-8dde81ab8a18 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-24f68ca2-6ca9-442c-a877-8dde81ab8a18');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-0c18f56c-81b6-4c65-85b2-85813581eae9\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0c18f56c-81b6-4c65-85b2-85813581eae9')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-0c18f56c-81b6-4c65-85b2-85813581eae9 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 108
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fig, axes =plt.subplots(2,2,figsize=(20,10))\n",
        "sns.countplot(x='stalk-surface-above-ring',data=data,palette='bright',ax=axes[0,0],hue='Target')\n",
        "axes[0,0].set_title('Target ~ stalk-surface-above-ring')\n",
        "\n",
        "sns.countplot(x='odor',data=data,palette='Set3',ax=axes[0,1],hue='Target')\n",
        "axes[0,1].set_title('Target ~ odor')\n",
        "\n",
        "sns.countplot(x='stalk-surface-below-ring',data=data,palette='Set1',ax=axes[1,0],hue='Target')\n",
        "axes[1,0].set_title('Target ~ stalk-surface-below-ring')\n",
        "\n",
        "sns.countplot(x='stalk-surface-below-ring',data=data,palette='Set2',ax=axes[1,1],hue='Target')\n",
        "axes[1,1].set_title('Target ~ stalk-surface-below-ring')"
      ],
      "metadata": {
        "id": "4ZVjaF4suyWy",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 725
        },
        "outputId": "14f4db6d-7534-4c83-aecd-a3a79b422543"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Target ~ stalk-surface-below-ring')"
            ]
          },
          "metadata": {},
          "execution_count": 109
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x1000 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fig, axes =plt.subplots(1,2,figsize=(20,5),squeeze=False)\n",
        "\n",
        "sns.countplot(x='veil-type',data=data, palette='bright',ax=axes[0,0], hue='Target')\n",
        "axes[0,0].set_title('Target ~ veil-type')\n",
        "\n",
        "sns.countplot(x='veil-color',data=data, palette='Set3',ax=axes[0,1],hue='Target')\n",
        "axes[0,1].set_title('Target ~ veil-color')"
      ],
      "metadata": {
        "id": "BqP9AhZc1Zl3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 414
        },
        "outputId": "4e47c58c-9d2b-403b-d276-621555987fe3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Target ~ veil-color')"
            ]
          },
          "metadata": {},
          "execution_count": 110
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fig, axes =plt.subplots(1,2,figsize=(20,5),squeeze=False)\n",
        "\n",
        "sns.countplot(x='ring-number',data=data, palette='bright',ax=axes[0,0], hue='Target')\n",
        "axes[0,0].set_title('Target ~ ring-number')\n",
        "\n",
        "sns.countplot(x='ring-type',data=data, palette='Set3',ax=axes[0,1],hue='Target')\n",
        "axes[0,1].set_title('Target ~ ring-type')"
      ],
      "metadata": {
        "id": "R-lM_ASE3l7d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 414
        },
        "outputId": "a8c5fad8-79fb-4e57-c9f1-6267b2280460"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Target ~ ring-type')"
            ]
          },
          "metadata": {},
          "execution_count": 111
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fig, axes =plt.subplots(1,2,figsize=(20,5),squeeze=False)\n",
        "\n",
        "sns.countplot(x='spore-print-color', data=data, palette='bright', ax=axes[0,0], hue='Target')\n",
        "axes[0,0].set_title('Target ~ spore-print-color')\n",
        "\n",
        "sns.countplot(x='population',data=data, palette='Set3',ax=axes[0,1],hue='Target')\n",
        "axes[0,1].set_title('Target ~ population')"
      ],
      "metadata": {
        "id": "Vi08M6Di38U5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 414
        },
        "outputId": "478ece67-c7f1-44f8-8ae0-b8639a37b43f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Target ~ population')"
            ]
          },
          "metadata": {},
          "execution_count": 112
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Correlation Plot"
      ],
      "metadata": {
        "id": "QEB7IvTW0_K1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "imputed_df.columns.tolist()"
      ],
      "metadata": {
        "id": "E-y-ixC9HPwr",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "873b335b-907f-4d25-949f-f013b78d4dd6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['Target_poisonous',\n",
              " 'cap-shape_bell',\n",
              " 'cap-shape_conical',\n",
              " 'cap-shape_convex',\n",
              " 'cap-shape_flat',\n",
              " 'cap-shape_knobbed',\n",
              " 'cap-shape_sunken',\n",
              " 'cap-surface_fibrous',\n",
              " 'cap-surface_grooves',\n",
              " 'cap-surface_scaly',\n",
              " 'cap-surface_smooth',\n",
              " 'cap-color_brown',\n",
              " 'cap-color_buff',\n",
              " 'cap-color_cinnamon',\n",
              " 'cap-color_gray',\n",
              " 'cap-color_green',\n",
              " 'cap-color_pink',\n",
              " 'cap-color_purple',\n",
              " 'cap-color_red',\n",
              " 'cap-color_white',\n",
              " 'cap-color_yellow',\n",
              " 'bruises_bruises',\n",
              " 'bruises_no',\n",
              " 'odor_almond',\n",
              " 'odor_anise',\n",
              " 'odor_creosote',\n",
              " 'odor_fishy',\n",
              " 'odor_foul',\n",
              " 'odor_musty',\n",
              " 'odor_none',\n",
              " 'odor_pungent',\n",
              " 'odor_spicy',\n",
              " 'gill-attachment_attached',\n",
              " 'gill-attachment_free',\n",
              " 'gill-spacing_close',\n",
              " 'gill-spacing_crowded',\n",
              " 'gill-size_broad',\n",
              " 'gill-size_narrow',\n",
              " 'gill-color_black',\n",
              " 'gill-color_brown',\n",
              " 'gill-color_buff',\n",
              " 'gill-color_chocolate',\n",
              " 'gill-color_gray',\n",
              " 'gill-color_green',\n",
              " 'gill-color_orange',\n",
              " 'gill-color_pink',\n",
              " 'gill-color_purple',\n",
              " 'gill-color_red',\n",
              " 'gill-color_white',\n",
              " 'gill-color_yellow',\n",
              " 'stalk-shape_enlarging',\n",
              " 'stalk-shape_tapering',\n",
              " 'stalk-surface-above-ring_fibrous',\n",
              " 'stalk-surface-above-ring_scaly',\n",
              " 'stalk-surface-above-ring_silky',\n",
              " 'stalk-surface-above-ring_smooth',\n",
              " 'stalk-surface-below-ring_fibrous',\n",
              " 'stalk-surface-below-ring_scaly',\n",
              " 'stalk-surface-below-ring_silky',\n",
              " 'stalk-surface-below-ring_smooth',\n",
              " 'stalk-color-above-ring_brown',\n",
              " 'stalk-color-above-ring_buff',\n",
              " 'stalk-color-above-ring_cinnamon',\n",
              " 'stalk-color-above-ring_gray',\n",
              " 'stalk-color-above-ring_orange',\n",
              " 'stalk-color-above-ring_pink',\n",
              " 'stalk-color-above-ring_red',\n",
              " 'stalk-color-above-ring_white',\n",
              " 'stalk-color-above-ring_yellow',\n",
              " 'stalk-color-below-ring_brown',\n",
              " 'stalk-color-below-ring_buff',\n",
              " 'stalk-color-below-ring_cinnamon',\n",
              " 'stalk-color-below-ring_gray',\n",
              " 'stalk-color-below-ring_orange',\n",
              " 'stalk-color-below-ring_pink',\n",
              " 'stalk-color-below-ring_red',\n",
              " 'stalk-color-below-ring_white',\n",
              " 'stalk-color-below-ring_yellow',\n",
              " 'veil-type_partial',\n",
              " 'veil-color_brown',\n",
              " 'veil-color_orange',\n",
              " 'veil-color_white',\n",
              " 'veil-color_yellow',\n",
              " 'ring-number_0',\n",
              " 'ring-number_1',\n",
              " 'ring-number_2',\n",
              " 'ring-type_evanescent',\n",
              " 'ring-type_flaring',\n",
              " 'ring-type_large',\n",
              " 'ring-type_none',\n",
              " 'ring-type_pendant',\n",
              " 'spore-print-color_black',\n",
              " 'spore-print-color_brown',\n",
              " 'spore-print-color_buff',\n",
              " 'spore-print-color_chocolate',\n",
              " 'spore-print-color_green',\n",
              " 'spore-print-color_orange',\n",
              " 'spore-print-color_purple',\n",
              " 'spore-print-color_white',\n",
              " 'spore-print-color_yellow',\n",
              " 'population_abundant',\n",
              " 'population_clustered',\n",
              " 'population_numerous',\n",
              " 'population_scattered',\n",
              " 'population_several',\n",
              " 'population_solitary',\n",
              " 'habitat_grasses',\n",
              " 'habitat_leaves',\n",
              " 'habitat_meadows',\n",
              " 'habitat_paths',\n",
              " 'habitat_urban',\n",
              " 'habitat_waste',\n",
              " 'habitat_woods',\n",
              " 'bulbous',\n",
              " 'club',\n",
              " 'cup',\n",
              " 'equal',\n",
              " 'rooted']"
            ]
          },
          "metadata": {},
          "execution_count": 113
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "matrix=imputed_df.corr()\n",
        "corr_matrix=pd.DataFrame(matrix[(matrix['Target_poisonous']>0.5) | (matrix['Target_poisonous']<-0.5)]['Target_poisonous'])\n",
        "print(corr_matrix)\n"
      ],
      "metadata": {
        "id": "wmcpT-AV1Cj9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0786df7f-c255-4a9f-a221-71b82c1c423c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                                Target_poisonous\n",
            "Target_poisonous                        1.000000\n",
            "bruises_bruises                        -0.501530\n",
            "bruises_no                              0.501530\n",
            "odor_foul                               0.623842\n",
            "odor_none                              -0.785557\n",
            "gill-size_broad                        -0.540024\n",
            "gill-size_narrow                        0.540024\n",
            "gill-color_buff                         0.538808\n",
            "stalk-surface-above-ring_silky          0.587658\n",
            "stalk-surface-below-ring_silky          0.573524\n",
            "ring-type_pendant                      -0.540469\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cols=corr_matrix.index.to_list()"
      ],
      "metadata": {
        "id": "bFQ8qtPmRWAS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(20,20))\n",
        "sns.heatmap(corr_matrix,annot=False, cmap='coolwarm', fmt='.2f', square=True)\n"
      ],
      "metadata": {
        "id": "T7t8iI0d17r9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "fe134d28-844a-483c-daad-d4560bff8a37"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 116
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x2000 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### TRAIN TEST SPLIT"
      ],
      "metadata": {
        "id": "tTp8RJCyQ2Bf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "cols"
      ],
      "metadata": {
        "id": "BNlneaKFI9w1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9323d19c-bfed-4d7e-a6c2-2ff99a7489bb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['Target_poisonous',\n",
              " 'bruises_bruises',\n",
              " 'bruises_no',\n",
              " 'odor_foul',\n",
              " 'odor_none',\n",
              " 'gill-size_broad',\n",
              " 'gill-size_narrow',\n",
              " 'gill-color_buff',\n",
              " 'stalk-surface-above-ring_silky',\n",
              " 'stalk-surface-below-ring_silky',\n",
              " 'ring-type_pendant']"
            ]
          },
          "metadata": {},
          "execution_count": 117
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X=imputed_df[cols[1:-1]]\n",
        "\n",
        "Y=imputed_df[cols[0]]\n",
        "X.info()"
      ],
      "metadata": {
        "id": "e0sMfbo-RNAC",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "91358a5b-30d7-40bc-f83e-67054ecd9a2f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 8124 entries, 0 to 8123\n",
            "Data columns (total 9 columns):\n",
            " #   Column                          Non-Null Count  Dtype  \n",
            "---  ------                          --------------  -----  \n",
            " 0   bruises_bruises                 8124 non-null   float64\n",
            " 1   bruises_no                      8124 non-null   float64\n",
            " 2   odor_foul                       8124 non-null   float64\n",
            " 3   odor_none                       8124 non-null   float64\n",
            " 4   gill-size_broad                 8124 non-null   float64\n",
            " 5   gill-size_narrow                8124 non-null   float64\n",
            " 6   gill-color_buff                 8124 non-null   float64\n",
            " 7   stalk-surface-above-ring_silky  8124 non-null   float64\n",
            " 8   stalk-surface-below-ring_silky  8124 non-null   float64\n",
            "dtypes: float64(9)\n",
            "memory usage: 571.3 KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Y.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fMmRgjAHjSY_",
        "outputId": "7eb67a87-9a7f-41f1-fb37-3ac9d7d8769e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.series.Series'>\n",
            "RangeIndex: 8124 entries, 0 to 8123\n",
            "Series name: Target_poisonous\n",
            "Non-Null Count  Dtype  \n",
            "--------------  -----  \n",
            "8124 non-null   float64\n",
            "dtypes: float64(1)\n",
            "memory usage: 63.6 KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.3)\n",
        "X_train.shape"
      ],
      "metadata": {
        "id": "ILcsaTZTQ6mT",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a7bc33cc-b140-4606-b05b-8b95c872e1a2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(5686, 9)"
            ]
          },
          "metadata": {},
          "execution_count": 120
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_test.shape\n"
      ],
      "metadata": {
        "id": "fpte6-TdSHX1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9435f64a-45f7-4581-9250-6c3efb635fbd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(2438, 9)"
            ]
          },
          "metadata": {},
          "execution_count": 121
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Y_test.shape\n"
      ],
      "metadata": {
        "id": "u-GQfa6PSSFe",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "17231f92-4890-4cef-9a9a-17176c17c833"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(2438,)"
            ]
          },
          "metadata": {},
          "execution_count": 122
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Y_train.shape"
      ],
      "metadata": {
        "id": "1pd2b4cFSS7D",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b0d6d85a-ab0e-461e-f389-be020eaa49e0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(5686,)"
            ]
          },
          "metadata": {},
          "execution_count": 123
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### LOGISTIC REGRESSION"
      ],
      "metadata": {
        "id": "6rcqqBgUQy7e"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "* Why Logistic Regression\n",
        "* use of logistic regression\n",
        "* advantages with respect to this project"
      ],
      "metadata": {
        "id": "Rou1StbIG5Yd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import statsmodels.api as sm\n",
        "X = sm.add_constant(X)\n",
        "model1=sm.Logit(Y_train,X_train).fit()\n"
      ],
      "metadata": {
        "id": "nDZjDz18Qyi8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8a93f4e0-68dd-405f-830d-2dce9bea8d9d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Warning: Maximum number of iterations has been exceeded.\n",
            "         Current function value: 0.099334\n",
            "         Iterations: 35\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n",
            "  warnings.warn(\"Maximum Likelihood optimization failed to \"\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model1.summary()"
      ],
      "metadata": {
        "id": "ZJBLoB5nk6sL",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 488
        },
        "outputId": "6e7f9750-ba03-4add-fab2-914e32b9faf1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<class 'statsmodels.iolib.summary.Summary'>\n",
              "\"\"\"\n",
              "                           Logit Regression Results                           \n",
              "==============================================================================\n",
              "Dep. Variable:       Target_poisonous   No. Observations:                 5686\n",
              "Model:                          Logit   Df Residuals:                     5677\n",
              "Method:                           MLE   Df Model:                            8\n",
              "Date:                Sat, 28 Oct 2023   Pseudo R-squ.:                  0.8566\n",
              "Time:                        02:30:35   Log-Likelihood:                -564.82\n",
              "converged:                      False   LL-Null:                       -3938.1\n",
              "Covariance Type:            nonrobust   LLR p-value:                     0.000\n",
              "==================================================================================================\n",
              "                                     coef    std err          z      P>|z|      [0.025      0.975]\n",
              "--------------------------------------------------------------------------------------------------\n",
              "bruises_bruises                   -0.2716        nan        nan        nan         nan         nan\n",
              "bruises_no                        -0.5465        nan        nan        nan         nan         nan\n",
              "odor_foul                         43.3912   3.99e+04      0.001      0.999   -7.82e+04    7.83e+04\n",
              "odor_none                         -1.9720      0.187    -10.560      0.000      -2.338      -1.606\n",
              "gill-size_broad                   -2.3514        nan        nan        nan         nan         nan\n",
              "gill-size_narrow                   1.5333        nan        nan        nan         nan         nan\n",
              "gill-color_buff                   41.7260   4.47e+04      0.001      0.999   -8.76e+04    8.77e+04\n",
              "stalk-surface-above-ring_silky     3.5114      0.322     10.918      0.000       2.881       4.142\n",
              "stalk-surface-below-ring_silky   -15.9887    792.464     -0.020      0.984   -1569.189    1537.212\n",
              "==================================================================================================\n",
              "\n",
              "Possibly complete quasi-separation: A fraction 0.43 of observations can be\n",
              "perfectly predicted. This might indicate that there is complete\n",
              "quasi-separation. In this case some parameters will not be identified.\n",
              "\"\"\""
            ],
            "text/html": [
              "<table class=\"simpletable\">\n",
              "<caption>Logit Regression Results</caption>\n",
              "<tr>\n",
              "  <th>Dep. Variable:</th>   <td>Target_poisonous</td> <th>  No. Observations:  </th>  <td>  5686</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Model:</th>                 <td>Logit</td>      <th>  Df Residuals:      </th>  <td>  5677</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Method:</th>                 <td>MLE</td>       <th>  Df Model:          </th>  <td>     8</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Date:</th>            <td>Sat, 28 Oct 2023</td> <th>  Pseudo R-squ.:     </th>  <td>0.8566</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Time:</th>                <td>02:30:35</td>     <th>  Log-Likelihood:    </th> <td> -564.82</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>converged:</th>             <td>False</td>      <th>  LL-Null:           </th> <td> -3938.1</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Covariance Type:</th>     <td>nonrobust</td>    <th>  LLR p-value:       </th>  <td> 0.000</td> \n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "                 <td></td>                   <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>bruises_bruises</th>                <td>   -0.2716</td> <td>      nan</td> <td>      nan</td> <td>   nan</td> <td>      nan</td> <td>      nan</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>bruises_no</th>                     <td>   -0.5465</td> <td>      nan</td> <td>      nan</td> <td>   nan</td> <td>      nan</td> <td>      nan</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>odor_foul</th>                      <td>   43.3912</td> <td> 3.99e+04</td> <td>    0.001</td> <td> 0.999</td> <td>-7.82e+04</td> <td> 7.83e+04</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>odor_none</th>                      <td>   -1.9720</td> <td>    0.187</td> <td>  -10.560</td> <td> 0.000</td> <td>   -2.338</td> <td>   -1.606</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>gill-size_broad</th>                <td>   -2.3514</td> <td>      nan</td> <td>      nan</td> <td>   nan</td> <td>      nan</td> <td>      nan</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>gill-size_narrow</th>               <td>    1.5333</td> <td>      nan</td> <td>      nan</td> <td>   nan</td> <td>      nan</td> <td>      nan</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>gill-color_buff</th>                <td>   41.7260</td> <td> 4.47e+04</td> <td>    0.001</td> <td> 0.999</td> <td>-8.76e+04</td> <td> 8.77e+04</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>stalk-surface-above-ring_silky</th> <td>    3.5114</td> <td>    0.322</td> <td>   10.918</td> <td> 0.000</td> <td>    2.881</td> <td>    4.142</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>stalk-surface-below-ring_silky</th> <td>  -15.9887</td> <td>  792.464</td> <td>   -0.020</td> <td> 0.984</td> <td>-1569.189</td> <td> 1537.212</td>\n",
              "</tr>\n",
              "</table><br/><br/>Possibly complete quasi-separation: A fraction 0.43 of observations can be<br/>perfectly predicted. This might indicate that there is complete<br/>quasi-separation. In this case some parameters will not be identified."
            ],
            "text/latex": "\\begin{center}\n\\begin{tabular}{lclc}\n\\toprule\n\\textbf{Dep. Variable:}                  & Target\\_poisonous & \\textbf{  No. Observations:  } &     5686    \\\\\n\\textbf{Model:}                          &       Logit       & \\textbf{  Df Residuals:      } &     5677    \\\\\n\\textbf{Method:}                         &        MLE        & \\textbf{  Df Model:          } &        8    \\\\\n\\textbf{Date:}                           &  Sat, 28 Oct 2023 & \\textbf{  Pseudo R-squ.:     } &   0.8566    \\\\\n\\textbf{Time:}                           &      02:30:35     & \\textbf{  Log-Likelihood:    } &   -564.82   \\\\\n\\textbf{converged:}                      &       False       & \\textbf{  LL-Null:           } &   -3938.1   \\\\\n\\textbf{Covariance Type:}                &     nonrobust     & \\textbf{  LLR p-value:       } &    0.000    \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lcccccc}\n                                         & \\textbf{coef} & \\textbf{std err} & \\textbf{z} & \\textbf{P$> |$z$|$} & \\textbf{[0.025} & \\textbf{0.975]}  \\\\\n\\midrule\n\\textbf{bruises\\_bruises}                &      -0.2716  &          nan     &       nan  &           nan        &          nan    &          nan     \\\\\n\\textbf{bruises\\_no}                     &      -0.5465  &          nan     &       nan  &           nan        &          nan    &          nan     \\\\\n\\textbf{odor\\_foul}                      &      43.3912  &     3.99e+04     &     0.001  &         0.999        &    -7.82e+04    &     7.83e+04     \\\\\n\\textbf{odor\\_none}                      &      -1.9720  &        0.187     &   -10.560  &         0.000        &       -2.338    &       -1.606     \\\\\n\\textbf{gill-size\\_broad}                &      -2.3514  &          nan     &       nan  &           nan        &          nan    &          nan     \\\\\n\\textbf{gill-size\\_narrow}               &       1.5333  &          nan     &       nan  &           nan        &          nan    &          nan     \\\\\n\\textbf{gill-color\\_buff}                &      41.7260  &     4.47e+04     &     0.001  &         0.999        &    -8.76e+04    &     8.77e+04     \\\\\n\\textbf{stalk-surface-above-ring\\_silky} &       3.5114  &        0.322     &    10.918  &         0.000        &        2.881    &        4.142     \\\\\n\\textbf{stalk-surface-below-ring\\_silky} &     -15.9887  &      792.464     &    -0.020  &         0.984        &    -1569.189    &     1537.212     \\\\\n\\bottomrule\n\\end{tabular}\n%\\caption{Logit Regression Results}\n\\end{center}\n\nPossibly complete quasi-separation: A fraction 0.43 of observations can be \\newline\n perfectly predicted. This might indicate that there is complete \\newline\n quasi-separation. In this case some parameters will not be identified."
          },
          "metadata": {},
          "execution_count": 125
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model1.aic"
      ],
      "metadata": {
        "id": "xfunbgOj0hgZ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a88d2095-1147-40e6-85ac-cfbdae2d4342"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1147.6317668163756"
            ]
          },
          "metadata": {},
          "execution_count": 126
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Taking only significant variables"
      ],
      "metadata": {
        "id": "p2A8D8emwyD-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "X=imputed_df[[cols[4],cols[8]]]\n",
        "\n",
        "Y=imputed_df[cols[0]]\n",
        "X.info()"
      ],
      "metadata": {
        "id": "NNH-WCTOoHyg",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b84c6e13-74d1-41ca-c272-382ec961bc02"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 8124 entries, 0 to 8123\n",
            "Data columns (total 2 columns):\n",
            " #   Column                          Non-Null Count  Dtype  \n",
            "---  ------                          --------------  -----  \n",
            " 0   odor_none                       8124 non-null   float64\n",
            " 1   stalk-surface-above-ring_silky  8124 non-null   float64\n",
            "dtypes: float64(2)\n",
            "memory usage: 127.1 KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Y.info()"
      ],
      "metadata": {
        "id": "hA1vzfZ-pN82",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a23c5e65-c6b2-44f7-90b2-b96864e5a78e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.series.Series'>\n",
            "RangeIndex: 8124 entries, 0 to 8123\n",
            "Series name: Target_poisonous\n",
            "Non-Null Count  Dtype  \n",
            "--------------  -----  \n",
            "8124 non-null   float64\n",
            "dtypes: float64(1)\n",
            "memory usage: 63.6 KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.3)\n",
        "X_train.shape"
      ],
      "metadata": {
        "id": "lPbe_Ms9q-Rx",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "104c052c-244d-44f9-c2ef-163ca37be258"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(5686, 2)"
            ]
          },
          "metadata": {},
          "execution_count": 129
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X = sm.add_constant(X)\n",
        "model1=sm.Logit(Y_train,X_train).fit()"
      ],
      "metadata": {
        "id": "FZhcVFi-dnZd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3918a87c-1b5e-46bb-a21c-2c35a9783495"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Optimization terminated successfully.\n",
            "         Current function value: 0.271507\n",
            "         Iterations 8\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model1.summary()"
      ],
      "metadata": {
        "id": "cMqPdZQMel8Y",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 252
        },
        "outputId": "67dd9f02-e865-464e-cb70-f9db9f107861"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<class 'statsmodels.iolib.summary.Summary'>\n",
              "\"\"\"\n",
              "                           Logit Regression Results                           \n",
              "==============================================================================\n",
              "Dep. Variable:       Target_poisonous   No. Observations:                 5686\n",
              "Model:                          Logit   Df Residuals:                     5684\n",
              "Method:                           MLE   Df Model:                            1\n",
              "Date:                Sat, 28 Oct 2023   Pseudo R-squ.:                  0.6080\n",
              "Time:                        02:30:35   Log-Likelihood:                -1543.8\n",
              "converged:                       True   LL-Null:                       -3938.5\n",
              "Covariance Type:            nonrobust   LLR p-value:                     0.000\n",
              "==================================================================================================\n",
              "                                     coef    std err          z      P>|z|      [0.025      0.975]\n",
              "--------------------------------------------------------------------------------------------------\n",
              "odor_none                         -4.3494      0.151    -28.821      0.000      -4.645      -4.054\n",
              "stalk-surface-above-ring_silky     3.9581      0.152     26.064      0.000       3.661       4.256\n",
              "==================================================================================================\n",
              "\"\"\""
            ],
            "text/html": [
              "<table class=\"simpletable\">\n",
              "<caption>Logit Regression Results</caption>\n",
              "<tr>\n",
              "  <th>Dep. Variable:</th>   <td>Target_poisonous</td> <th>  No. Observations:  </th>  <td>  5686</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Model:</th>                 <td>Logit</td>      <th>  Df Residuals:      </th>  <td>  5684</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Method:</th>                 <td>MLE</td>       <th>  Df Model:          </th>  <td>     1</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Date:</th>            <td>Sat, 28 Oct 2023</td> <th>  Pseudo R-squ.:     </th>  <td>0.6080</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Time:</th>                <td>02:30:35</td>     <th>  Log-Likelihood:    </th> <td> -1543.8</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>converged:</th>             <td>True</td>       <th>  LL-Null:           </th> <td> -3938.5</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Covariance Type:</th>     <td>nonrobust</td>    <th>  LLR p-value:       </th>  <td> 0.000</td> \n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "                 <td></td>                   <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>odor_none</th>                      <td>   -4.3494</td> <td>    0.151</td> <td>  -28.821</td> <td> 0.000</td> <td>   -4.645</td> <td>   -4.054</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>stalk-surface-above-ring_silky</th> <td>    3.9581</td> <td>    0.152</td> <td>   26.064</td> <td> 0.000</td> <td>    3.661</td> <td>    4.256</td>\n",
              "</tr>\n",
              "</table>"
            ],
            "text/latex": "\\begin{center}\n\\begin{tabular}{lclc}\n\\toprule\n\\textbf{Dep. Variable:}                  & Target\\_poisonous & \\textbf{  No. Observations:  } &     5686    \\\\\n\\textbf{Model:}                          &       Logit       & \\textbf{  Df Residuals:      } &     5684    \\\\\n\\textbf{Method:}                         &        MLE        & \\textbf{  Df Model:          } &        1    \\\\\n\\textbf{Date:}                           &  Sat, 28 Oct 2023 & \\textbf{  Pseudo R-squ.:     } &   0.6080    \\\\\n\\textbf{Time:}                           &      02:30:35     & \\textbf{  Log-Likelihood:    } &   -1543.8   \\\\\n\\textbf{converged:}                      &        True       & \\textbf{  LL-Null:           } &   -3938.5   \\\\\n\\textbf{Covariance Type:}                &     nonrobust     & \\textbf{  LLR p-value:       } &    0.000    \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lcccccc}\n                                         & \\textbf{coef} & \\textbf{std err} & \\textbf{z} & \\textbf{P$> |$z$|$} & \\textbf{[0.025} & \\textbf{0.975]}  \\\\\n\\midrule\n\\textbf{odor\\_none}                      &      -4.3494  &        0.151     &   -28.821  &         0.000        &       -4.645    &       -4.054     \\\\\n\\textbf{stalk-surface-above-ring\\_silky} &       3.9581  &        0.152     &    26.064  &         0.000        &        3.661    &        4.256     \\\\\n\\bottomrule\n\\end{tabular}\n%\\caption{Logit Regression Results}\n\\end{center}"
          },
          "metadata": {},
          "execution_count": 131
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model1.aic"
      ],
      "metadata": {
        "id": "XFpkJ7uM0c90",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e71af8e7-3a93-40e7-d331-9a20ca664469"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3091.577135357596"
            ]
          },
          "metadata": {},
          "execution_count": 132
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test_pred=model1.predict(X_test)\n",
        "test_pred_class = (test_pred >= 0.7).astype(int)"
      ],
      "metadata": {
        "id": "VNVBT8bySwiV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "test_pred_class[0:5]"
      ],
      "metadata": {
        "id": "erasQmQ-TCk4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4ef8167f-f495-4d66-f43d-8f1fde8c0e5a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "5944    1\n",
              "4104    0\n",
              "5022    1\n",
              "1734    0\n",
              "6717    1\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 134
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import accuracy_score,confusion_matrix,recall_score, precision_score,classification_report\n",
        "accuracy1=accuracy_score(Y_test,test_pred_class)\n",
        "print(accuracy1)"
      ],
      "metadata": {
        "id": "2oX-U63AS5Gj",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "06cd70c9-6e6e-4c3d-97b5-4812386c0685"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.7850697292863003\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "all1)recall1=recall_score(test_pred_class,Y_test)\n",
        "print(rec"
      ],
      "metadata": {
        "id": "4kUG9g5cTem8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "20d1b84d-6bff-45da-8a3e-8bc1ff9e754d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "precision1=precision_score(Y_test,test_pred_class)\n",
        "print(precision1)"
      ],
      "metadata": {
        "id": "pORqWxtSTmtc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c29ee0f6-b49a-4e9d-9e41-3c230486aada"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "con_matrix=confusion_matrix(Y_test,test_pred_class)\n",
        "print(con_matrix)"
      ],
      "metadata": {
        "id": "MaNSgutjTUm-",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "77c4b6f3-83ae-4c18-b2f6-e9391f71ba1c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1277    0]\n",
            " [ 524  637]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "classification_report(Y_test,test_pred_class)"
      ],
      "metadata": {
        "id": "M3f3xmUNd_H4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 71
        },
        "outputId": "6ea991e5-91b7-4834-ce76-b47e3822c548"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'              precision    recall  f1-score   support\\n\\n         0.0       0.71      1.00      0.83      1277\\n         1.0       1.00      0.55      0.71      1161\\n\\n    accuracy                           0.79      2438\\n   macro avg       0.85      0.77      0.77      2438\\nweighted avg       0.85      0.79      0.77      2438\\n'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 139
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### KNN model"
      ],
      "metadata": {
        "id": "Cv9CwdhRUnCg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "X=imputed_df[cols[1:-1]]\n",
        "Y=imputed_df[cols[0]]\n",
        "X.info()"
      ],
      "metadata": {
        "id": "z-CQifdHshPg",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b25fe413-5a03-4cec-d030-3ed039ced683"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 8124 entries, 0 to 8123\n",
            "Data columns (total 9 columns):\n",
            " #   Column                          Non-Null Count  Dtype  \n",
            "---  ------                          --------------  -----  \n",
            " 0   bruises_bruises                 8124 non-null   float64\n",
            " 1   bruises_no                      8124 non-null   float64\n",
            " 2   odor_foul                       8124 non-null   float64\n",
            " 3   odor_none                       8124 non-null   float64\n",
            " 4   gill-size_broad                 8124 non-null   float64\n",
            " 5   gill-size_narrow                8124 non-null   float64\n",
            " 6   gill-color_buff                 8124 non-null   float64\n",
            " 7   stalk-surface-above-ring_silky  8124 non-null   float64\n",
            " 8   stalk-surface-below-ring_silky  8124 non-null   float64\n",
            "dtypes: float64(9)\n",
            "memory usage: 571.3 KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.3)\n",
        "X_train.shape"
      ],
      "metadata": {
        "id": "bWgo3N4ksjzy",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b0e45cd5-3c51-41fe-fff5-d89ebd1a9729"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(5686, 9)"
            ]
          },
          "metadata": {},
          "execution_count": 141
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "knn=KNeighborsClassifier(n_neighbors=3)\n",
        "model2=knn.fit(X_train,Y_train)"
      ],
      "metadata": {
        "id": "-BDfXj4yUqHo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "test_pred2=model2.predict(X_test)"
      ],
      "metadata": {
        "id": "CfUKpJscVKri"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "accuracy2=accuracy_score(Y_test,test_pred2)\n",
        "print(accuracy2)"
      ],
      "metadata": {
        "id": "7Lj_PlvrVep9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a0e3304b-6d87-42ef-ffb0-dfcc483dad89"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.9602132895816243\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(precision_score(Y_test,test_pred2))\n"
      ],
      "metadata": {
        "id": "nzm5rVkovIdo",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "22b07331-27fa-47f2-d282-0538e72b6eb9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(recall_score(Y_test,test_pred2))"
      ],
      "metadata": {
        "id": "FIkP0E0AvPyr",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fb7fd6bd-8e53-41e2-f8d8-c446e6253705"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.9171648163962425\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "con_matrix2=confusion_matrix(Y_test,test_pred2)\n",
        "print(con_matrix2)"
      ],
      "metadata": {
        "id": "j6Kp_i3MVpyN",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f73d1fd1-4198-4c37-f745-faf0e132fbf1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1267    0]\n",
            " [  97 1074]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "classification_report(test_pred2,Y_test)"
      ],
      "metadata": {
        "id": "gE1UHUGifK_6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 71
        },
        "outputId": "54aa7cf0-37fd-455f-b994-e135ab52bb70"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'              precision    recall  f1-score   support\\n\\n         0.0       1.00      0.93      0.96      1364\\n         1.0       0.92      1.00      0.96      1074\\n\\n    accuracy                           0.96      2438\\n   macro avg       0.96      0.96      0.96      2438\\nweighted avg       0.96      0.96      0.96      2438\\n'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 148
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Create a desicion tree taking all the variables\n",
        "* take entire dataset\n",
        "* split again in test and train\n",
        "* build a classification tree"
      ],
      "metadata": {
        "id": "hSd3cBUVHuNU"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### DECISION TREE CLASSIFIER\n",
        "Considering the entire dataset"
      ],
      "metadata": {
        "id": "ZrL3jnjwFF_3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data2.info()"
      ],
      "metadata": {
        "id": "Ucai-OMal8ad",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6706edc0-92e6-4193-e376-6ca0036b496f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 8124 entries, 0 to 8123\n",
            "Data columns (total 23 columns):\n",
            " #   Column                    Non-Null Count  Dtype \n",
            "---  ------                    --------------  ----- \n",
            " 0   Target                    8124 non-null   object\n",
            " 1   cap-shape                 8124 non-null   object\n",
            " 2   cap-surface               8124 non-null   object\n",
            " 3   cap-color                 8124 non-null   object\n",
            " 4   bruises                   8124 non-null   object\n",
            " 5   odor                      8124 non-null   object\n",
            " 6   gill-attachment           8124 non-null   object\n",
            " 7   gill-spacing              8124 non-null   object\n",
            " 8   gill-size                 8124 non-null   object\n",
            " 9   gill-color                8124 non-null   object\n",
            " 10  stalk-shape               8124 non-null   object\n",
            " 11  stalk-surface-above-ring  8124 non-null   object\n",
            " 12  stalk-surface-below-ring  8124 non-null   object\n",
            " 13  stalk-color-above-ring    8124 non-null   object\n",
            " 14  stalk-color-below-ring    8124 non-null   object\n",
            " 15  veil-type                 8124 non-null   object\n",
            " 16  veil-color                8124 non-null   object\n",
            " 17  ring-number               8124 non-null   object\n",
            " 18  ring-type                 8124 non-null   object\n",
            " 19  spore-print-color         8124 non-null   object\n",
            " 20  population                8124 non-null   object\n",
            " 21  habitat                   8124 non-null   object\n",
            " 22  stalk-root                8124 non-null   object\n",
            "dtypes: object(23)\n",
            "memory usage: 1.4+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "X= imputed_df.iloc[:, 1:]\n",
        "Y = imputed_df.iloc[:, 0]\n",
        "X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.3)\n",
        "X_train.shape"
      ],
      "metadata": {
        "id": "CBFt2_RfGa6W",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6717abc2-cbe7-40f7-f238-cb82cf5f70b7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(5686, 117)"
            ]
          },
          "metadata": {},
          "execution_count": 150
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.tree import export_text,plot_tree\n",
        "model4 = DecisionTreeClassifier(random_state = 56, max_depth = 2)\n",
        "model4.fit(X_train,Y_train)"
      ],
      "metadata": {
        "id": "pssi1vzFBcqY",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 75
        },
        "outputId": "8f5a9044-d78b-478d-837a-b8269f86429a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DecisionTreeClassifier(max_depth=2, random_state=56)"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier(max_depth=2, random_state=56)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier(max_depth=2, random_state=56)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 151
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "tree_rules = export_text(model4,feature_names=X_train.columns.to_list())\n",
        "print(tree_rules)"
      ],
      "metadata": {
        "id": "E662eAoEfIR0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "09b03656-2476-492b-ecee-69422e667214"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "|--- odor_none <= 0.50\n",
            "|   |--- bruises_bruises <= 0.50\n",
            "|   |   |--- class: 1.0\n",
            "|   |--- bruises_bruises >  0.50\n",
            "|   |   |--- class: 0.0\n",
            "|--- odor_none >  0.50\n",
            "|   |--- spore-print-color_green <= 0.50\n",
            "|   |   |--- class: 0.0\n",
            "|   |--- spore-print-color_green >  0.50\n",
            "|   |   |--- class: 1.0\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Y_train.unique()"
      ],
      "metadata": {
        "id": "8HyC_MPBgv2p",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "189623cf-3f80-4ab9-b8f0-61de7d86e051"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1., 0.])"
            ]
          },
          "metadata": {},
          "execution_count": 153
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(12, 8))\n",
        "plot_tree(model4, feature_names=X_train.columns.to_list(), class_names=Y_train.unique().astype('str'), filled=True)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "Iv4mnaO-gEG7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 653
        },
        "outputId": "781eba04-c7b6-4941-b5c5-12590741d714"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test_pred4=model4.predict(X_test)"
      ],
      "metadata": {
        "id": "Zp4SIZrCBcn8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "accuracy4=accuracy_score(Y_test,test_pred4)\n",
        "print(accuracy4)"
      ],
      "metadata": {
        "id": "DeADxyQdBclT",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "17a8a16c-5d89-4cd4-9eb8-39cfafaa5137"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.9273995077932732\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "precision4=precision_score(Y_test,test_pred4)\n",
        "print(precision4)"
      ],
      "metadata": {
        "id": "C8GCHR5cNpiA",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c70dcc9f-b2bb-4124-afca-43ea09e10341"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "recall4=recall_score(Y_test,test_pred4)\n",
        "print(recall4)"
      ],
      "metadata": {
        "id": "PU-rz3hZyBv2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "eef89d01-bb85-400a-e803-ad353cc9e485"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.8456843940714909\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "con_matrix=confusion_matrix(Y_test,test_pred4)\n",
        "print(con_matrix)"
      ],
      "metadata": {
        "id": "-YKmU3V-No1v",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ca58b220-a53f-4bcb-ce3b-036555485234"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1291    0]\n",
            " [ 177  970]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "classification_report(Y_test,test_pred4)"
      ],
      "metadata": {
        "id": "f7CPypOKgFk2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 71
        },
        "outputId": "fdf626e0-126d-4730-e9ae-ddda29d93759"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'              precision    recall  f1-score   support\\n\\n         0.0       0.88      1.00      0.94      1291\\n         1.0       1.00      0.85      0.92      1147\\n\\n    accuracy                           0.93      2438\\n   macro avg       0.94      0.92      0.93      2438\\nweighted avg       0.94      0.93      0.93      2438\\n'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 160
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### SVM"
      ],
      "metadata": {
        "id": "SBIEEqF_E8I1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.svm import SVC\n",
        "model3 = SVC(gamma='auto')\n",
        "model3.fit(X_train,Y_train)"
      ],
      "metadata": {
        "id": "i3aXYPImBczY",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 75
        },
        "outputId": "9c53f07c-dacb-4105-a4d2-3d9056256064"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "SVC(gamma='auto')"
            ],
            "text/html": [
              "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVC(gamma=&#x27;auto&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC(gamma=&#x27;auto&#x27;)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 161
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test_pred3=model3.predict(X_test)"
      ],
      "metadata": {
        "id": "ubblMTozBcv1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "accuracy3=accuracy_score(Y_test,test_pred3)\n",
        "print(accuracy3)"
      ],
      "metadata": {
        "id": "8nrvGk5CBcsu",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2bf93943-7705-4d38-b676-044799fa225a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.9983593109105825\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "precision3=precision_score(Y_test,test_pred3)\n",
        "print(precision3)"
      ],
      "metadata": {
        "id": "UuGra5p8N72k",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4a93e6cd-5b3f-4b48-ffd8-a32f10d3ec89"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "recall3=recall_score(Y_test,test_pred3)\n",
        "print(recall3)"
      ],
      "metadata": {
        "id": "X8YMy4Hxys-y",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "56a51ca7-f6de-42bd-f5a9-57e7e7386ada"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.9965126416739319\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "con_matrix=confusion_matrix(Y_test,test_pred3)\n",
        "print(con_matrix)"
      ],
      "metadata": {
        "id": "-ypUmWBIMHCa",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "612be30a-117d-43b0-85e0-f9d45ff374bc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1291    0]\n",
            " [   4 1143]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "classification_report(Y_test,test_pred3)"
      ],
      "metadata": {
        "id": "NLCluRxegWj2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 71
        },
        "outputId": "4e091d39-e37d-4a9f-817c-3fea73730c80"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'              precision    recall  f1-score   support\\n\\n         0.0       1.00      1.00      1.00      1291\\n         1.0       1.00      1.00      1.00      1147\\n\\n    accuracy                           1.00      2438\\n   macro avg       1.00      1.00      1.00      2438\\nweighted avg       1.00      1.00      1.00      2438\\n'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 167
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Random Forest"
      ],
      "metadata": {
        "id": "9XB2HkExSW7-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Import necessary libraries\n",
        "import pandas as pd\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "import numpy as np"
      ],
      "metadata": {
        "id": "cYQeghJFSaT9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Split the data into training and testing sets\n",
        "target = imputed_df['Target_poisonous']\n",
        "X_train,X_test,Y_train,Y_test=train_test_split(imputed_df.iloc[:, 1:],target,test_size=0.3)\n",
        "X_train.shape\n"
      ],
      "metadata": {
        "id": "9F955xC200XI",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0ecbc8cb-15e8-4028-e7f3-dabe886af295"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(5686, 117)"
            ]
          },
          "metadata": {},
          "execution_count": 169
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Initialize RandomForestClassifier\n",
        "rfc = RandomForestClassifier(n_estimators=50, random_state=42)\n"
      ],
      "metadata": {
        "id": "T0RwibbM011_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Train the model\n",
        "rfc.fit(X_train, Y_train)"
      ],
      "metadata": {
        "id": "vKskQbYJ05mZ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 75
        },
        "outputId": "00831321-20f6-4e10-9501-40b8d313c246"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestClassifier(n_estimators=50, random_state=42)"
            ],
            "text/html": [
              "<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(n_estimators=50, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(n_estimators=50, random_state=42)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 171
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "feature_importances = pd.DataFrame(rfc.feature_importances_,columns=['feature_importances'])\n",
        "feature_importances.index = X_train.columns.to_list()\n",
        "cummsum=feature_importances['feature_importances'].cumsum()\n",
        "\n",
        "feature_importances.sort_values(by='feature_importances',ascending=False)\n"
      ],
      "metadata": {
        "id": "k0hIYo-vh_wR",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "outputId": "b04dc8b5-245a-4f91-9c6a-58794aae5c34"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                          feature_importances\n",
              "odor_none                            0.121555\n",
              "gill-size_broad                      0.085759\n",
              "odor_foul                            0.068658\n",
              "gill-color_buff                      0.054587\n",
              "gill-size_narrow                     0.047307\n",
              "...                                       ...\n",
              "spore-print-color_orange             0.000000\n",
              "gill-color_orange                    0.000000\n",
              "spore-print-color_buff               0.000000\n",
              "veil-type_partial                    0.000000\n",
              "population_abundant                  0.000000\n",
              "\n",
              "[117 rows x 1 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ae8ef8e5-7551-459b-939f-b019ac8b9b14\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>feature_importances</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>odor_none</th>\n",
              "      <td>0.121555</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>gill-size_broad</th>\n",
              "      <td>0.085759</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>odor_foul</th>\n",
              "      <td>0.068658</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>gill-color_buff</th>\n",
              "      <td>0.054587</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>gill-size_narrow</th>\n",
              "      <td>0.047307</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>spore-print-color_orange</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>gill-color_orange</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>spore-print-color_buff</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>veil-type_partial</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>population_abundant</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>117 rows × 1 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ae8ef8e5-7551-459b-939f-b019ac8b9b14')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ae8ef8e5-7551-459b-939f-b019ac8b9b14 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ae8ef8e5-7551-459b-939f-b019ac8b9b14');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-bafaef1d-3385-40cb-95d8-1750a6086162\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bafaef1d-3385-40cb-95d8-1750a6086162')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-bafaef1d-3385-40cb-95d8-1750a6086162 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 172
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Make predictions\n",
        "Y_pred = rfc.predict(X_test)"
      ],
      "metadata": {
        "id": "hr262obY09KK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Print classification report\n",
        "print(accuracy_score(Y_pred,Y_test))"
      ],
      "metadata": {
        "id": "V9GfZzY81E-2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "dc017a01-f6b6-4d1a-baad-868857528658"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "precision3=precision_score(Y_pred,Y_test)\n",
        "print(precision3)"
      ],
      "metadata": {
        "id": "8i_6I5XxeOss",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "dcdb03fc-357c-47da-b90e-c66937a784f4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(recall_score(Y_pred,Y_test))\n"
      ],
      "metadata": {
        "id": "ORiutJkBwdFd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8742db26-3fe8-441f-b421-6c458a6751dc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "con_matrix=confusion_matrix(Y_pred,Y_test)\n",
        "print(con_matrix)"
      ],
      "metadata": {
        "id": "um9hsGw1efsH",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "21ac09aa-07a6-4a90-e6d2-374577ebb020"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1253    0]\n",
            " [   0 1185]]\n"
          ]
        }
      ]
    }
  ]
}